<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.1" created="2013-07-10 21:07" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>A Modest Proposal</title>
	<link>http://www.frederiknakstad.com</link>
	<description>Web Development, Japanese, Music</description>
	<pubDate>Wed, 10 Jul 2013 21:07:29 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.frederiknakstad.com</wp:base_site_url>
	<wp:base_blog_url>http://www.frederiknakstad.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>nakstad@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>astronomy</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Astronomy]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Development]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>japanese</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Japanese]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>music</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Music]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>node-js</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Node.js]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>angular-js</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Angular JS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>application-cache</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Application Cache]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>angular-js-2</wp:tag_slug><wp:tag_name><![CDATA[Angular.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>application-cache</wp:tag_slug><wp:tag_name><![CDATA[Application Cache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>express</wp:tag_slug><wp:tag_name><![CDATA[Express]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>grunt-js</wp:tag_slug><wp:tag_name><![CDATA[Grunt.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>html5</wp:tag_slug><wp:tag_name><![CDATA[HTML5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[MongoDB]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>mongoose</wp:tag_slug><wp:tag_name><![CDATA[Mongoose]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>node-js</wp:tag_slug><wp:tag_name><![CDATA[Node.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>passport-js</wp:tag_slug><wp:tag_name><![CDATA[Passport.js]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>6</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>nav-menu</wp:term_slug><wp:term_name><![CDATA[Nav Menu]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.5.1</generator>

	<item>
		<title>Token introductory post</title>
		<link>http://www.frederiknakstad.com/token-introductory-post/</link>
		<pubDate>Wed, 05 Dec 2012 22:13:42 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[I debated with myself for a little bit whether to have an introductory post or just to get started blogging. You can probably guess what I decided on in the end...

The purpose of this blog is completely for self-amusement, and is basically a means of jotting down notes for whatever it is I'm working on at the  time. In the best case scenario other people will benefit from my posts, and give me feedback on better ways to solve things or simply provide interesting ideas and insight. I don't anticipate a huge flood of people wanting to read my ill-organized thoughts, but maybe I can distract the occasional straggler.

I've been working a lot with Node.js, Angular, and MongoDB lately, and I'm trying to find patterns and practices that can be reused. I will try to make some blog posts documenting whatever results I stumble upon and supplement with code examples on GitHub. I am also in the middle of studying the Japanese language so expect posts which basically are extended notes on the usage of various grammatical constructs, interesting kanji, words, and the occasional cultural revelation.

As stated earlier, this is a personal blog, so don't expect a very focused theme here; I will post about anything from cute kitty pictures to development patterns and books/music that interest me at the time. Blogging seems to me to have the potential to be a highly masturbatory and scatter-brained act, and I plan to indulge without any pretense of a more noble motive.

Anyway, stay tuned for actual content!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2012-12-05 22:13:42</wp:post_date>
		<wp:post_date_gmt>2012-12-05 22:13:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>token-introductory-post</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Authentication in Single Page Applications with Angular.js</title>
		<link>http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/</link>
		<pubDate>Mon, 21 Jan 2013 16:34:47 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>3/6/2013 Update:</strong>
<em>I've done some heavy refactoring, and have now introduced an angular service to eliminate a lot of redundant code, as well as a directive which can aid in optionally displaying/hiding elements based on an access level. Please check out the <a href="https://github.com/fnakstad/angular-client-side-auth">GitHub repo</a> for the latest version. The example app in the repo has been deployed to Heroku, so now you can test it out live for yourself <a href="http://angular-client-side-auth.herokuapp.com/">right here</a>.</em>

I have been working a lot with Angular.js lately, and love how easy it makes it to create web applications with rich client-side functionality. It's an extremely useful asset in keeping your own client-side code lean, making it easy to separate business logic and declarative markup for anything view specific. However, it's not all roses, and I'm still struggling to find the best solutions to some problems I have encountered. One of which is a problem that exceeds the scope of Angular...

<em><strong>How do I deal with authentication and authorization in single page applications?</strong></em>

Since only the initial load of the app is a full page load, and subsequent communication with the server is entirely done via XHRs I need a slightly different model from the traditional one. One option I tried out was to have a traditional login page which, on success, redirects to a secured URL which loads the actual application. This has the added benefit that the client side code and view templates used for pages intended for logged in users are not accessible to anyone not logged in. However, in many cases this is not much of a concern as long as the communication against the resource API is properly secured. Preventing anyone from getting or modifying sensitive data is a server-side issue, and should therefore be properly handled there. I wanted a seamless user experience with no full page reloads beyond the initial page load, so I decided to play around a little and see if I could come up with an alternative. These are the core characteristics of the solution I set out to implement:
<ol>
	<li>The server needs to communicate what permissions/role the client has on inital page load.</li>
	<li>The client app then needs to keep track of the user's login status, and change it accordingly when the user logs in or out. These operations should not cause a full page reload.</li>
	<li>The access level of the routes should be declared as part of the rest of the routing configuration.</li>
</ol>
<h4>Configuring access levels and user roles</h4>
To indicate the available user roles and access levels to be used in the routing system, I decided to make a separate module which could be used both on the client and server side (with Node.js):

<pre>
[javascript]
(function(exports){

    var userRoles = {
        public: 1, // 001
        user:   2, // 010
        admin:  4  // 100
    };

    exports.userRoles = userRoles;
    exports.accessLevels = {
        public: userRoles.public | userRoles.user | userRoles.admin, // 111
        anon:   userRoles.public,                                    // 001
        user:   userRoles.user | userRoles.admin,                    // 110
        admin:  userRoles.admin                                      // 100
    };
})(typeof exports === 'undefined'? this['routingConfig']={}: exports);
[/javascript]
</pre>

Both the user roles and access levels are defined as numbers so that it is possible to calculate permissions using binary operations. User roles are defined by which bit is set to 1, while access levels indicate whether that user role has access by setting the corresponding bit to either 1 or 0.
<h4>Setting up client-side routing</h4>
When I define my routes I want to indicate what access level each route should have, so I add a new property to each route, called <code>access</code>, like so:

<pre>
[javascript]

angular.module('myApp', ['myApp.services', 'ngCookies'])
.config(['$routeProvider', '$locationProvider',
    function ($routeProvider, $locationProvider) {

    ...

    var access = routingConfig.accessLevels;

    $routeProvider.when('/register',
        {
            templateUrl:    'partials/register',
            controller:     RegisterCtrl,
            access:         access.anon
        });
    $routeProvider.when('/private',
        {
            templateUrl:    'partials/private',
            controller:     PrivateCtrl,
            access:         access.user
        });
    $routeProvider.when('/admin',
        {
            templateUrl:    'partials/admin',
            controller:     AdminCtrl,
            access:         access.admin
        });

    ...

}])
[/javascript]
</pre>
<h4>Communicating login status to client side app on initial page load</h4>
When the user first loads the client side app, whether he's trying to access a restricted or public route initially, the server needs to communicate the current role of the user. Since the client side app can't decrypt the authentication cookie set by the server, I decided to communicate login status via the HTTP response which serves up the single page application. I decided on doing this by setting a cookie, which the client would clear upon reading it. I feel like there's something icky about doing it this way, so I'm open to any alternative solutions here. Anyway, the server sets the cookie like so:
<pre>
[javascript]
app.get('/*', function(req, res){
    var role = userRoles.public, username = '';
    if(req.user) {
        role = req.user.role;
        username = req.user.username;
    }

    res.cookie('user', JSON.stringify({
        'username': username,
        'role': role
    }));

    res.render('index');
});
[/javascript]
</pre>

On the client-side I have an Angular service which upon initialization will read in this cookie, save the login status to a user on the <code>$rootScope</code>, then discard the cookie.

<pre>
[javascript]
angular.module('angular-client-side-auth')
.factory('Auth', function($http, $rootScope, $cookieStore){

    ...

    $rootScope.user = $cookieStore.get('user') || { username: '', role: userRoles.public };
    $cookieStore.remove('user');

    ...

});
[/javascript]
</pre>

So, now my Angular app knows what login status the user has, and can perform the client side routing based on this status.
<h4>Enforcing the routing policy client-side</h4>

<strong>Warning: I want to stress the importance of securing your server-side API once-again. The routing policy we're "enforcing" client-side is <em>very</em> easy to get around using Chrome Developer Tools or Firebug. The technique I'm describing is used as a way of tailoring your views and giving a better user experience, but malicious users can still change their user role and get access to client-side routes that should be restricted to them. This is not a problem as long as any sensitive data is accessed via your server-side API, and the proper authentication/authorization strategy is implemented there.</strong>

Now that I have access to the current user's role and the access level of each route I can actually enforce the policy I've configured.
This functionality is implemented in the <code>Auth</code> service I mentioned earlier, so that I can use it in the other components of my Angular app.

<pre>
[javascript]

angular.module('angular-client-side-auth')
.factory('Auth', function($http, $rootScope, $cookieStore){

    ...

    $rootScope.accessLevels = accessLevels;
    $rootScope.userRoles = userRoles;

    return {
        authorize: function(accessLevel, role) {
            if(role === undefined)
                role = $rootScope.user.role;
            return accessLevel &amp; role;
        },

        isLoggedIn: function(user) {
            if(user === undefined)
                user = $rootScope.user;
            return user.role === userRoles.user || user.role === userRoles.admin;
        },

        register: function(user, success, error) {
            $http.post('/register', user).success(success).error(error);
        },

        login: function(user, success, error) {
            $http.post('/login', user).success(function(user){
                $rootScope.user = user;
                success(user);
            }).error(error);
        },

        logout: function(success, error) {
            $http.post('/logout').success(function(){
                $rootScope.user = {
                    username = '',
                    role = userRoles.public
                };
                success();
            }).error(error);
        },

        accessLevels: accessLevels,
        userRoles: userRoles
    };
});
[/javascript]
</pre>

Now I can inject this service in any other component of my Angular application. For example, to actually enforce my routing policy I need to utilize the <code>authorize()</code> and <code>isLoggedIn()</code> functions in an event handler on $routeChangeStart:

<pre>
[javascript]
$rootScope.$on(&quot;$routeChangeStart&quot;, function (event, next, current) {
    if (!Auth.authorize(next.access)) {
        if(Auth.isLoggedIn()) $location.path('/');
        else                  $location.path('/login');
    }
});
[/javascript]
</pre>

Now, whenever a route is accessed, the proper authorization check will be performed before serving up the view, and a redirect will happen in case the user has insufficient permissions.

One gotcha here is that the session could time out making the client believe the user is logged in when in fact he is declined when communicating with the server resource API. However this can be rectified by using an HTTP interceptor to detect API calls that were denied. Mine is pretty simple, and just redirects to the login page in case of a 401.

<pre>
[javascript]
angular.module('angularAuth', 
    ['angularAuth.filters',
    'angularAuth.services', 
    'angularAuth.directives', 
    'ngCookies'])
.config([
    '$routeProvider', 
    '$locationProvider', 
    '$httpProvider', 
    function ($routeProvider, $locationProvider, $httpProvider) {

    ...

    var interceptor = ['$location', '$q', function($location, $q) {
        function success(response) {
            return response;
        }

        function error(response) {

            if(response.status === 401) {
                $location.path('/login');
                return $q.reject(response);
            }
            else {
                return $q.reject(response);
            }
        }

        return function(promise) {
            return promise.then(success, error);
        }
    }];

    $httpProvider.responseInterceptors.push(interceptor);
});
[/javascript]
</pre>

<h4>Customizing views based on user role</h4>
As you may have noticed, in the <code>Auth</code> service I made the <code>userRoles</code> and <code>accessLevels</code> available to my views by setting them on the <code>$rootScope</code>. This paves the way for a directive I've made which you can use to show/hide elements based on the current user's role. Here's the directive:

<pre>
[javascript]

angular.module('angular-client-side-auth')
.directive('accessLevel', ['$rootScope', 'Auth', function($rootScope, Auth) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var prevDisp = element.css('display');
            $rootScope.$watch('user.role', function(role) {
                if(!Auth.authorize(attrs.accessLevel))
                    element.css('display', 'none');
                else
                    element.css('display', prevDisp);
            });
        }
    };
}]);

[/javascript]
</pre>

So, whenever you decorate a tag with the <code>access-level</code> directive, it will check the role of the current user, perform an authorization check using the injected <code>Auth</code>, and then show/hide the element. It also remembers the previous <code>display</code> property of the element in case the user logs out, thus changing her role.

I really want to stress again the point that this scheme exposes all the routing logic and view templates to the client, and can easily be manipulated by the end user. So, you still have to make sure that the calls to the server are properly authenticated and authorized there.

I have made a complete example with all the code available in <strong><a href="https://github.com/fnakstad/angular-client-side-auth">this GitHub repository</a></strong>, which might illustrate this example better than I have been able to in this blogpost.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2013-01-21 16:34:47</wp:post_date>
		<wp:post_date_gmt>2013-01-21 16:34:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>authentication-in-single-page-applications-with-angular-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="angular-js"><![CDATA[Angular JS]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Eddie]]></wp:comment_author>
			<wp:comment_author_email>eddie@element13.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.130.122.182</wp:comment_author_IP>
			<wp:comment_date>2013-04-12 15:48:51</wp:comment_date>
			<wp:comment_date_gmt>2013-04-12 15:48:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you have the sample source for this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365781731.9924209;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365783029.901758;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-04-12 16:11:17</wp:comment_date>
			<wp:comment_date_gmt>2013-04-12 16:11:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep! There's a link to a GitHub repo containing a working example at the very end of the post.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>14</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365783077.5681889;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[Tomasz Dziurko]]></wp:comment_author>
			<wp:comment_author_email>tdziurko@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://tomaszdziurko.pl</wp:comment_author_url>
			<wp:comment_author_IP>78.154.69.72</wp:comment_author_IP>
			<wp:comment_date>2013-04-26 11:07:18</wp:comment_date>
			<wp:comment_date_gmt>2013-04-26 11:07:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fredrik, thanks a lot for this post. I was wondering how we could implement access roles in our AngularJS application and I've stumbled upon your elegand and clean solution.

Thanks again :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366974438.4933579;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367007843.1425829;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-04-26 20:26:11</wp:comment_date>
			<wp:comment_date_gmt>2013-04-26 20:26:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for commenting :)
I'm sure there is room for improvement to the solution, but I'm happy it's proved useful to other people as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>54</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367007971.034379;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>122</wp:comment_id>
			<wp:comment_author><![CDATA[kahramonj]]></wp:comment_author>
			<wp:comment_author_email>kahramonj@seznam.cz</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.201.60.162</wp:comment_author_IP>
			<wp:comment_date>2013-05-10 07:45:17</wp:comment_date>
			<wp:comment_date_gmt>2013-05-10 07:45:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello!
 I have a question: I would like to add a new tag to the index.jade like "Welcome {{username}}" for a logged in user. Yes, I did it, but the problem is when I refresh the page(F5)  the username in "Welcome {{username}}" disappears. Can you navigate me how to do it please? Thank you.

PS: I did following changes in your code:

a)  app.post('/login', function(req, res, next) {
...
res.json(200, { "username": user.username, "userRole": user.userRole });
..
});

b) 
function LoginCtrl($rootScope, $scope, $location, Auth) {
...
$rootScope.username = res.username;
...
}

c) 
app.get('/*', function(req, res){
...
if(req.user) {
            userRole = req.user.userRole;
            username = req.user.username;
        }
res.cookie('userRole', userRole);
res.cookie('username', username);
res.render('index');
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368171917.179379;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368175170.5962169;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>123</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-10 11:38:48</wp:comment_date>
			<wp:comment_date_gmt>2013-05-10 11:38:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi kahramonj, and thanks for commenting.
I just updated the GitHub repo and example site with this functionality. I've briefly explained the solution in <a href="https://github.com/fnakstad/angular-client-side-auth/issues/1" rel="nofollow">this GitHub issue</a>, but let me know if you're struggling with it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>122</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368185928.9564409;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email>ripper.admin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.172.21.16</wp:comment_author_IP>
			<wp:comment_date>2013-05-11 10:18:12</wp:comment_date>
			<wp:comment_date_gmt>2013-05-11 10:18:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello! Thanks for your post!

I have a question. Let's say I have index.html and a /#/admin route. If I go to index.html and then change the route to index.html/#/admin then $routeChangeStart event happens and you check for user role and everything works fine.

But what if I go straightly to /#/admin? The $routeChangeStart event isn't fired. I don't fully understand how do you deal with it, your example works perfectly though. I tried to check user role in .run function and redirect to some route but it doesn't work. And I don't use backend here, because if user is not logged in then the cookie isn't set and user's role is anonymous. So he goal is when I type in my browser index.html/#/admin I should be redirected to index.html/#/login. Instead I get admin template. Well, to be clear:
		$stateProvider
			.state('admin', {
				abstract: true,
				url: '/',
				templateUrl: 'templates/admin.html'
			})
			.state('admin.desktop', {   // &lt;--- I type index.html/#/desktop and get there in spite of the fact that I&#039;m not logged
				url: &#039;desktop&#039;,
				templateUrl: &#039;templates/desktop.html&#039;
			})

By the way I use ui-router plugin for my routing...


Thanks in advance!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368267492.1534369;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368271874.217557;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>129</wp:comment_id>
			<wp:comment_author><![CDATA[kahramonj]]></wp:comment_author>
			<wp:comment_author_email>kahramonj@seznam.cz</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.201.60.162</wp:comment_author_IP>
			<wp:comment_date>2013-05-11 11:03:11</wp:comment_date>
			<wp:comment_date_gmt>2013-05-11 11:03:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Frederik, 

thank you for quick feedback!  I really appreciate this. 
I will check your updates. Thanks!

Kahramon.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>123</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368270191.0907071;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[kahramonj]]></wp:comment_author>
			<wp:comment_author_email>kahramonj@seznam.cz</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.201.60.162</wp:comment_author_IP>
			<wp:comment_date>2013-05-11 12:53:24</wp:comment_date>
			<wp:comment_date_gmt>2013-05-11 12:53:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Frederik,

I am here to give you my feedback: your changes are working like a charm :-) . Very good. 
However I already posted some suggestion in the GitHub: https://github.com/fnakstad/angular-client-side-auth/issues/3

Thank you.
Kahramon.
PS: as just info, I am using MongoDB with mongoose for data -&gt; working fine.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>123</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368276804.621726;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>131</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-11 14:24:22</wp:comment_date>
			<wp:comment_date_gmt>2013-05-11 14:24:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Victor!

The <code>$routeChangeStart</code> event should fire even if you go straight to /#/admin, so that shouldn't pose much of a problem. What version of Angular are you using? Because I recently upgraded the example to 1.1.4, and noticed that they had changed the name of the <code>$route</code> property used in the $routeChangeStart handler to <code>$$route</code>. Maybe that's your problem?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>128</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368282262.1866801;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>132</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-11 15:05:13</wp:comment_date>
			<wp:comment_date_gmt>2013-05-11 15:05:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks again for the feedback Kahramon :) I really appreciate it!
I'll definitely try implementing the changes you proposed within the next few days, and you're more than welcome to submit a pull request if you feel up for giving it a try yourself.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>130</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368284713.7031929;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email>ripper.admin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.172.21.16</wp:comment_author_IP>
			<wp:comment_date>2013-05-12 16:39:20</wp:comment_date>
			<wp:comment_date_gmt>2013-05-12 16:39:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for reply!

I should have used "$stateChangeStart" as I use ui-router plugin...

Another issue: I didn't know about httpOnly flag when setting a cookie. When I tried to set a cookie on the server side when I log in, my framework (laravel) sets cookie with httponly flag. Am I right that I should disable this flag? No problems with security?

I was also thinking about ajax request to get user auth status but not sure if it'll work]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368376760.6133239;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-13 18:01:17</wp:comment_date>
			<wp:comment_date_gmt>2013-05-13 18:01:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi again, Victor! I'm glad you sorted out your routing problem. 

As for the httpOnly flag: the httpOnly flag is used to make sure that client-side script can't read a cookie. This means that malicious client-side scripts can't (or at least makes it harder to) hijack a user's cookies and send them off to some remote server in a cross-site scripting attack. 

However, the whole purpose of the 'userRole' cookie I set in the example is to communicate from our server to our client-side script what role the current user has. Since the client has to be able to read it you have to make sure that httpOnly is set to false. This also means that malicious users might be able to get a hold of it. So your policy should be to not store any sort of sensitive data in a cookie with httpOnly = false.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>145</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368468077.655597;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email>ripper.admin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.172.21.16</wp:comment_author_IP>
			<wp:comment_date>2013-05-13 20:59:51</wp:comment_date>
			<wp:comment_date_gmt>2013-05-13 20:59:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Okay, just need some assurance that I got it right

It's like if we write something like: 
userRole =   in PHP
So there is nothing to worry about.

The only thing - the cookie should live the same time as lives server session I think]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368478791.793246;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[Victor]]></wp:comment_author>
			<wp:comment_author_email>ripper.admin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.172.21.16</wp:comment_author_IP>
			<wp:comment_date>2013-05-13 21:00:37</wp:comment_date>
			<wp:comment_date_gmt>2013-05-13 21:00:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[oops your parser deleted my php tags :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368478837.5893121;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-14 10:35:11</wp:comment_date>
			<wp:comment_date_gmt>2013-05-14 10:35:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, the cookie is only used for bootstrapping the Angular app on an new pageload and isn't used after, so there's really no need to keep it around. After Angular has initialized you can keep track of the user role via the <code>$rootScope</code> for example. You also have the case where a user may sign out and log in as another user with a different role. If this happens the cookie will be out of sync with the actual active user. So, I decided to delete it right after initially reading it so that I don't accidentally use it for anything after I have read the userRole into the <code>$rootScope</code>.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>154</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368527711.702172;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-14 10:37:19</wp:comment_date>
			<wp:comment_date_gmt>2013-05-14 10:37:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Really? I'm not too familiar with PHP, but when the page is served to the browser and the JavaScript starts executing it should be in plain HTML. Maybe you can give me a more specific example of what goes wrong?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>155</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368527839.9201579;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff]]></wp:comment_author>
			<wp:comment_author_email>gsogol@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.133.214.11</wp:comment_author_IP>
			<wp:comment_date>2013-05-16 16:15:34</wp:comment_date>
			<wp:comment_date_gmt>2013-05-16 16:15:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you thought about how to do coarse-grained authorization like showing/hiding certain fields based on some access control?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368720934.3279259;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368739994.7991419;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-16 21:46:12</wp:comment_date>
			<wp:comment_date_gmt>2013-05-16 21:46:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep! If you check out the GitHub repo and the live deployment of that code you will see that the menu has buttons that are either displayed or hidden based on the current user role. Same goes for the info box in the upper left corner which is only shown to logged in users. However, I am thinking of doing a larger refactoring to make this kind of thing easier to work with... At the moment I'm not sure whether it would be best to simply use Angular.js's built-in <code>ng-show</code> directive and offer a <code>$rootScope</code> function which will evaluate access rights, or to roll my own directive to make the syntax even terser. I'm sort of leaning towards the latter at the time. That would mean that you in practice could do something like this: 
<code>&lt;div id="secretItem" data-ng-access-level="accessLevels.admin">
&lt;/div></code>.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>168</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368740772.5446811;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[Vlad]]></wp:comment_author>
			<wp:comment_author_email>vladimir@vlad.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>130.243.206.148</wp:comment_author_IP>
			<wp:comment_date>2013-05-23 19:28:18</wp:comment_date>
			<wp:comment_date_gmt>2013-05-23 19:28:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After logged in, how do you validate the user on the server to prevent people from forging requests? I'm thinking that you need to set a session or something but I'm probably wrong.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369337298.754313;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369339650.1946249;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-23 20:10:05</wp:comment_date>
			<wp:comment_date_gmt>2013-05-23 20:10:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, a httpOnly session cookie is set, which is sent to the server whenever performing XHR's against the server. So, it works the same as in standard "multi page" applications.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>216</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369339805.961987;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>219</wp:comment_id>
			<wp:comment_author><![CDATA[Christine]]></wp:comment_author>
			<wp:comment_author_email>cfengping@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>61.152.132.230</wp:comment_author_IP>
			<wp:comment_date>2013-05-24 08:52:21</wp:comment_date>
			<wp:comment_date_gmt>2013-05-24 08:52:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[access:  access.admin, just indicate?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369385541.510952;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369401820.724921;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>222</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-24 13:25:46</wp:comment_date>
			<wp:comment_date_gmt>2013-05-24 13:25:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm sorry, but I don't understand what you're asking about... Could you rephrase your question?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>219</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369401946.2307639;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>231</wp:comment_id>
			<wp:comment_author><![CDATA[Pablo]]></wp:comment_author>
			<wp:comment_author_email>pablodenadai@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.151.14.31</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 11:53:46</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 11:53:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, thanks a lot for writing this example.

I'm trying to implement it locally and I'm having to proxy the back-end so it would give me a cross domain error.

I'm wondering how you run both back and front end servers at the same time (same port)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369569226.1550341;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369570484.8177919;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>232</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 12:32:29</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 12:32:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Pablo, and thanks for commenting :)

The implementation depends on your server-side framework, but I don't think it should be more complex than setting up your routes correctly. In my example app on GitHub I use Node.js, and there I have defined one "static" route which serves everything in my <code>public</code> folder (client-side stuff: HTML, CSS, JavaScript, images, etc.). And then I also have a few routes which define my backend API (logging in/out, registering, getting a list of users, etc.).

Another option, if you want to keep your backend server on a separate port from the server offering the client-side files, is to allow cross-domain calls to your backend server by setting the Access-Control-Allow-Origin header on your HTTP responses.

I'm actually thinking about writing a follow-up post which explains better how I have set up things on the server-side, so I'll get on that when I'm a little less busy. Anyway, let me know if you're still having trouble.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>231</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369571549.3576331;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>234</wp:comment_id>
			<wp:comment_author><![CDATA[Pablo]]></wp:comment_author>
			<wp:comment_author_email>pablodenadai@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.151.14.31</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 14:22:04</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 14:22:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh duh! Of course, you are serving the entire project from NodeJs. That makes sense now. :-)

I was thinking to decouple the projects so I could use Yeoman to build the front end app. 

The only problem I see about working with different domains is that we can't share cookies and then the authentication system will fail.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>232</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369578124.05633;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>239</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 17:19:33</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 17:19:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Usually I separate the server and client specific stuff just by putting them in separate folders like in the GitHub project, but I can definitely understand if you have the need for greater decoupling. By the way, if you want to use forms authentication across domains check out this article: https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Requests_with_credentials]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>234</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369588773.785147;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>240</wp:comment_id>
			<wp:comment_author><![CDATA[Pablo]]></wp:comment_author>
			<wp:comment_author_email>pablodenadai@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.151.14.31</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 21:46:43</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 21:46:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool, thanks for that! 

My goal is to use PhoneGap to build a hybrid app. That's why I need to separate both sides.

I will let you know how it goes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>239</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369604803.860781;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[Pablo]]></wp:comment_author>
			<wp:comment_author_email>pablodenadai@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>149.135.147.1</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 22:05:43</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 22:05:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Btw, this project is very similar to what you're doing https://github.com/jedireza/drywall]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>239</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369605943.759495;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>249</wp:comment_id>
			<wp:comment_author><![CDATA[Markus]]></wp:comment_author>
			<wp:comment_author_email>mkniep@gmx.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.37.62.124</wp:comment_author_IP>
			<wp:comment_date>2013-05-27 10:44:30</wp:comment_date>
			<wp:comment_date_gmt>2013-05-27 10:44:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Thanks for your great example.

How could your example work without nodejs but with an own JBoss java backend? 
I mean the authentication calls between angular and JBoss will be very easy but how about the routing without nodejs?

It would be to much to have two server backends running :)

Thanks a lot,
Markus]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369651470.69311;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369652914.9988501;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>250</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-27 11:23:49</wp:comment_date>
			<wp:comment_date_gmt>2013-05-27 11:23:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Markus!

Since a non-Node.js server won't be able to import the module containing the user roles and access levels used by the client, you would have to define the access levels and user roles separately on the server side. So, it will be very important that you keep the set of access levels and user roles you're using on the client and server side always in sync. How you actually perform the authorization server-side doesn't matter, as long as you make sure that you set the userRole cookie when serving up the client application.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>249</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369653829.8527551;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>254</wp:comment_id>
			<wp:comment_author><![CDATA[rafat]]></wp:comment_author>
			<wp:comment_author_email>rsarosh@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.121.207.70</wp:comment_author_IP>
			<wp:comment_date>2013-05-27 18:31:06</wp:comment_date>
			<wp:comment_date_gmt>2013-05-27 18:31:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the great example. highly appreciate it.  

However, your 25th checking is breaking in server side with the following error:
 
ReferenceError: findByUsername is not defined
    at Strategy.module.exports.localStrategy [as _verify] (C:\sourcecode\angular-client-side-auth\server\models\User.js:70:24)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369679466.0750451;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369681453.6862719;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>255</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-27 19:04:44</wp:comment_date>
			<wp:comment_date_gmt>2013-05-27 19:04:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah, sorry about that. I committed a fix just now.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>254</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369681484.7149889;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>256</wp:comment_id>
			<wp:comment_author><![CDATA[rafat]]></wp:comment_author>
			<wp:comment_author_email>rsarosh@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.121.207.70</wp:comment_author_IP>
			<wp:comment_date>2013-05-27 19:57:39</wp:comment_date>
			<wp:comment_date_gmt>2013-05-27 19:57:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome! just pulled it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>255</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369684659.602015;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>265</wp:comment_id>
			<wp:comment_author><![CDATA[Dmitry]]></wp:comment_author>
			<wp:comment_author_email>dmitry.maevsky@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>50.152.138.242</wp:comment_author_IP>
			<wp:comment_date>2013-05-28 08:26:44</wp:comment_date>
			<wp:comment_date_gmt>2013-05-28 08:26:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello. Just my two cents.
I was actually solving a similar issue, namely:  how to make the Angular client side aware of changes in user authorization status (or more generally, "server state"). And the most elegant solution I finally came to is the following:
1. Exactly as you suggest, serialize the server state into a non-secure, client-readable cookie at each request. The only difference is that the client does not delete it (unlike what you suggested).
2.
<code>
angular.module('mainApp', ['ui.state', 'ngCookies'])
  .config(
    [       '$stateProvider',
    function($stateProvider) {

      $stateProvider
        .state('main', {
          url: '/'
        , restrict: []
        , templateUrl: '/partials/main'
        , controller: MainCtrl
        })
        .state('restricted', {
          url: '/restricted'
        , restrict: ['!auth']
        , templateUrl: '/partials/restricted'
        , controller: RestrictedCtrl
        })
        .state('signin', {
          url: '/signin'
        , restrict: ['auth']
        , templateUrl: '/partials/signin'
        , controller: SigninCtrl
        });
    }])
  .run(
    [       '$rootScope', '$state', '$stateParams', '$cookies',
    function($rootScope ,  $state ,  $stateParams,   $cookies) {
      $rootScope.$state = $state;
      $rootScope.$stateParams = $stateParams;
      $rootScope.$cookies = $cookies;
    }]);
</code>
3.
<code>
var MainCtrl = ['$scope', '$http', function($scope, $http) {
  $scope.serverState = {};

  $scope.$watch("$cookies['server.state']", function(newValue) {
    $scope.serverState = newValue ? JSON.parse(newValue.replace(/^j\:/, '')) : {};

    if ($scope.serverState.user &amp;&amp; $scope.$state.current.restrict.indexOf('auth') &gt;= 0)
      $scope.$state.transitionTo('main');
    if (!$scope.serverState.user &amp;&amp; $scope.$state.current.restrict.indexOf('!auth') &gt;= 0)
      $scope.$state.transitionTo('signin');
  });
}];
</code>
This way you don't have to check what server returns after each and every ajax request, it is all automatic.
Then if you prefer you could also add a similar $watch("$state.current") or, like you did, catch $stateChangeStart event, in order to prevent the user from typing the restricted URL directly in the browser location field, but this is not really crucial IMO.
NB. I am also using UI.router plug-in which is really awesome, but you can do the same with the original $route and $routeProvider services.
NB2. The user authntication cookie is completely separate from the 'server.state' cookie that I am discussing here. The authentication cookie SHOULD be HTTP only, signed and ideally Secure (HTTPS only). So this is beyond the scope.
NB3. The .replace(/^j\:/, '') is because of expressJS's res.cookie serialization format: you can amend it according to your server's cookie serialization format.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369729604.568527;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369759703.2630351;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>268</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-28 17:01:52</wp:comment_date>
			<wp:comment_date_gmt>2013-05-28 17:01:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Dmitry, and thanks for the example you posted. It looks to me like we pretty much have the same approach to the problem, with some minor differences in how we keep track of server state. If I have one comment, I think maybe it would be better to set up the server.state watch in the <code>run()</code> callback of your app-level module instead of doing it in the controller. What do you think about that? I'm not sure how your application is composed, so maybe I'm way off track here :p

Also, some of the code I have in this post is a little outdated since I have recently done some major refactoring in the GitHub repo. Now I have an Auth service I'm hooking into to eliminate a lot of the redundant work I previously did in the <code>login()</code> and <code>logout()</code> functions. Check out the updated code if you have time, and post an issue if you find something funny :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369760512.589715;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>269</wp:comment_id>
			<wp:comment_author><![CDATA[Max]]></wp:comment_author>
			<wp:comment_author_email>maxim.gubskiy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.69.217.57</wp:comment_author_IP>
			<wp:comment_date>2013-05-28 19:52:12</wp:comment_date>
			<wp:comment_date_gmt>2013-05-28 19:52:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, this solution is really awesome and helpful for me! Thanks a lot! Would you please just clarify difference between 'public' and 'anon' access levels? It seems very similar. It also seems that access levels and user roles mostly the same. Is it possible to use only 3 values for both: admin? user and public? Thanks in advance!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369770732.2045641;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942028.6243501;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>270</wp:comment_id>
			<wp:comment_author><![CDATA[Sergio]]></wp:comment_author>
			<wp:comment_author_email>sergiorobledo2k5@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.146.90.3</wp:comment_author_IP>
			<wp:comment_date>2013-05-29 04:34:49</wp:comment_date>
			<wp:comment_date_gmt>2013-05-29 04:34:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is awsome, i was wondering in the admin tab how can i only show the username admin? like if i create a user named 'bob' how can i only show bob in the ng repeat?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369802089.037214;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942030.0643699;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>274</wp:comment_id>
			<wp:comment_author><![CDATA[Greg Babula]]></wp:comment_author>
			<wp:comment_author_email>gbabula@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gregbabula.com</wp:comment_author_url>
			<wp:comment_author_IP>108.6.47.84</wp:comment_author_IP>
			<wp:comment_date>2013-05-29 18:14:58</wp:comment_date>
			<wp:comment_date_gmt>2013-05-29 18:14:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post, needed this for my new angular app so it was a huge help, thanks for sharing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369851298.893796;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942031.0933449;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>280</wp:comment_id>
			<wp:comment_author><![CDATA[irth]]></wp:comment_author>
			<wp:comment_author_email>irth03@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.180.127.88</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 19:18:54</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 19:18:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Frederik, thanks for posting this awesome git and saving us lots of time. Curious how I might call and save user-specific data?

Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369941534.2298181;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942032.1463101;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>281</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 19:34:28</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 19:34:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Absolutely! Public routes are visible for everyone, whether they're logged in or not. Anonymous routes are only available to users who are not logged in. So, if I set my login page's accessLevel to "anon", logged on users will be redirected when trying to access that route. I guess the naming I used can be improved :p

In my example I only use the three least significant bits of the number that represents each userRole/accessLevel. If you wanted to add a fourth option you could create a user role with the number 8 (1000 in binary). So really you can add a lot more user roles and access levels than I specified.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>269</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942468.419179;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>282</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 19:37:48</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 19:37:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Sergio! If I am reading your question correctly, you are wondering how you could filter the listing by what role the users are. You could do this by creating a filter and then passing in the userRole you want to display. This is actually a good idea, and I think I'll try to add this once I have some more time to work on this project again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>270</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942668.529201;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>283</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 19:39:21</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 19:39:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for commenting, Greg :) And good luck on your project!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>274</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942761.333164;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>284</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 19:42:57</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 19:42:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello! Do you mean how you would fetch user data from the server? I'm doing that in the example on GitHub by doing an AJAX request against my REST API. Check it out, and maybe that answers your question. Of course it's very important that you secure this resource on the server-side, so I made a separate middleware component to make sure that the user has access to the resource when I receive the request server-side. I'm thinking about writing a follow-up post where I deal with the server-side of this solution, so stay tuned :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>280</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369942977.5158861;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>292</wp:comment_id>
			<wp:comment_author><![CDATA[Max]]></wp:comment_author>
			<wp:comment_author_email>maxim.gubskiy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.69.217.57</wp:comment_author_IP>
			<wp:comment_date>2013-05-31 07:56:41</wp:comment_date>
			<wp:comment_date_gmt>2013-05-31 07:56:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Clear, Thanks a lot for clarification!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>281</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369987001.0869551;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>313</wp:comment_id>
			<wp:comment_author><![CDATA[Dmitry]]></wp:comment_author>
			<wp:comment_author_email>dmitry.maevsky@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>50.152.138.242</wp:comment_author_IP>
			<wp:comment_date>2013-06-02 04:33:45</wp:comment_date>
			<wp:comment_date_gmt>2013-06-02 04:33:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oops, sorry, that's renaming collision :) MainCtrl was not supposed to be attached to any particular state, but instead it is a "main" controller for the app: quite similar indeed to the run() block indeed. I just preferred to keep all meaningful code out of app.js, so I don't have to write tests for it :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>268</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370147625.51842;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>338</wp:comment_id>
			<wp:comment_author><![CDATA[Wee Ching]]></wp:comment_author>
			<wp:comment_author_email>wcchok@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>175.142.116.15</wp:comment_author_IP>
			<wp:comment_date>2013-06-03 14:36:37</wp:comment_date>
			<wp:comment_date_gmt>2013-06-03 14:36:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is that possible we can use login and logged-in in the same url ?
which "/"

means if user not login then stay at "/" page with login box else if logged-in then stay at "/" for authenticated page]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370270197.3365769;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370279361.47943;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>340</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-03 17:18:06</wp:comment_date>
			<wp:comment_date_gmt>2013-06-03 17:18:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Wee Ching! 
It's possible, but your routing table might seem a little misleading then, because the "/" route would in reality have two separate access levels... 

But I think you could solve it if you set the "/" route to accessLevel = public, and then had two different sections in the corresponding view which would be displayed/hidden depending on the current user. You could use the directive I recently committed to the GitHub repo for that: https://github.com/fnakstad/angular-client-side-auth/blob/master/client/js/directives.js

Then your view for "/" could be kind of like this: https://gist.github.com/fnakstad/5699705]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>338</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370279886.666121;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>371</wp:comment_id>
			<wp:comment_author><![CDATA[Vishal]]></wp:comment_author>
			<wp:comment_author_email>vishalchandra@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.codebee.in</wp:comment_author_url>
			<wp:comment_author_IP>122.176.196.50</wp:comment_author_IP>
			<wp:comment_date>2013-06-06 07:25:05</wp:comment_date>
			<wp:comment_date_gmt>2013-06-06 07:25:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the great effort in solving this.

I was trying to integrate Facebook login with Node.js + Passport + Express on the server and AngularJS on the client side. Facebook does redirects (302 status), how do I change your code to adapt to that ?

Probably the HTTP Interceptor has to change ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370503505.0741329;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370507155.666085;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>374</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-06-06 08:32:50</wp:comment_date>
			<wp:comment_date_gmt>2013-06-06 08:32:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Vishal, and thanks for commenting.
Using Facebook for authenticating your users would most likely involve a full redirect to Facebook, before the he/she is sent back to your Angular app. This means that when you're redirected back from Facebook, your server will have the user information it needs to set the user cookie and send it to the client. As far as I know, an HTTP interceptor shouldn't be necessary because a redirect from Facebook would mean you get a full page reload when you're sent back to your Angular application. I will take a closer look at this use-case, and update the GitHub repo with it. So, I'll let you know when I have something up and running :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>371</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370507570.3932071;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>375</wp:comment_id>
			<wp:comment_author><![CDATA[Vishal]]></wp:comment_author>
			<wp:comment_author_email>vishalchandra@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.codebee.in</wp:comment_author_url>
			<wp:comment_author_IP>122.176.219.251</wp:comment_author_IP>
			<wp:comment_date>2013-06-06 14:36:25</wp:comment_date>
			<wp:comment_date_gmt>2013-06-06 14:36:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why does a different kind of a page flicker in the beginning, is there a way to make that go away ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370529385.2053881;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>376</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-06 16:03:25</wp:comment_date>
			<wp:comment_date_gmt>2013-06-06 16:03:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah, thanks for catching that. That was actually not a different page, but a flash of the unstyled, "uncompiled" view. I just committed a fix to GitHub where I use the ngCloak directive to prevent this kind of behaviour.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>375</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370534605.007781;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>378</wp:comment_id>
			<wp:comment_author><![CDATA[Vishal]]></wp:comment_author>
			<wp:comment_author_email>vishalchandra@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.codebee.in</wp:comment_author_url>
			<wp:comment_author_IP>223.184.128.172</wp:comment_author_IP>
			<wp:comment_date>2013-06-07 05:51:14</wp:comment_date>
			<wp:comment_date_gmt>2013-06-07 05:51:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks ! This code you have outsourced has been a great help for my project.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>376</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370584274.8718441;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>379</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-06-07 07:02:14</wp:comment_date>
			<wp:comment_date_gmt>2013-06-07 07:02:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm glad to hear it :) Also expect an update with social login options this weekend. I got Twitter working yesterday, so I just need to add a Facebook option and clean up the code a little bit.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>378</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370588534.2680731;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>380</wp:comment_id>
			<wp:comment_author><![CDATA[Vishal]]></wp:comment_author>
			<wp:comment_author_email>vishalchandra@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.codebee.in</wp:comment_author_url>
			<wp:comment_author_IP>122.176.201.156</wp:comment_author_IP>
			<wp:comment_date>2013-06-07 09:01:16</wp:comment_date>
			<wp:comment_date_gmt>2013-06-07 09:01:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Was still getting the flash, maybe my computer is so slow I get to see everything in slow motion. :)

Finally fixed it by changing to display: none !important; and then I also needed to copy the ng-cloak css directly to the head.

My browser (chrome) was rendering the html even before the app.css (stored locally) got loaded and processed, so included the relevant css section to the html directly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>376</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370595676.1912651;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>384</wp:comment_id>
			<wp:comment_author><![CDATA[careful]]></wp:comment_author>
			<wp:comment_author_email>stu.salsbury@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>172.10.130.141</wp:comment_author_IP>
			<wp:comment_date>2013-06-07 19:56:01</wp:comment_date>
			<wp:comment_date_gmt>2013-06-07 19:56:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The author correctly points our that "Preventing anyone from getting or modifying sensitive data is a server-side issue, and should therefore be properly handled there. I wanted a seamless user experience with no full page reloads beyond the initial page load, so I decided to play around a little and see if I could come up with an alternative."

However, that statement seems to get lost in the rest of the entry: "Enforcing the routing policy
Now that I have access to the current user’s role and the access level of each route I can actually enforce the policy I’ve configured.
This functionality is implemented in the Auth service I mentioned earlier, so that I can use it in the other components of my Angular app."

Everyone should keep in mind that the code on this page doesn't *enforce* anything at all.  Anyone with the ability to launch the debugger in their browser can become an admin as far as angular is concerned by setting $rootScope.user.role = 4.

Extra credit for breaking on this line to subvert server-side security:  res.cookie('user', JSON.stringify({
        'username': username,
        'role': role
    }));

This post should be removed or edited to reflect that it is about tailoring a user interface where security is not a concern!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370634961.19928;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370683257.8642161;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>385</wp:comment_id>
			<wp:comment_author><![CDATA[Pirzada]]></wp:comment_author>
			<wp:comment_author_email>pirzada.rashid@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>111.119.177.155</wp:comment_author_IP>
			<wp:comment_date>2013-06-07 20:11:13</wp:comment_date>
			<wp:comment_date_gmt>2013-06-07 20:11:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I was following you work and it runs fine. Problem is I don't want to Jade engine instead using angular templating and routing. I changed and spent good amount of time but application is not working.

Can you tell me what should I change server side to make this work. 

Especially this piece of code 

<code>
{
        path: '/views/*',
        httpMethod: 'GET',
        middleware: [function (req, res) {
            var requestedView = path.join('./', req.url);
            console.log("req.url = " + req.url + " &amp; requestedView = " + requestedView);
            //res.render(requestedView);
        }],
        accessLevel: accessLevels.public
    },

and this

{
        path: '/*',
        httpMethod: 'GET',
        middleware: [function(req, res) {
            var role = userRoles.public, username = '';
            if(req.user) {
                role = req.user.role;
                username = req.user.username;
            }
            res.cookie('user', JSON.stringify({
                'username': username,
                'role': role
            }));

            console.log("************************routes.js -&gt;  path: '/*'*************************");
            console.log("role = " + role + " &amp; " + "username =" +username)

            //res.render('index');
            res.redirect('#/')
        }],
        accessLevel: accessLevels.public
    }

</code>
not working.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370635873.9713221;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370683254.7033999;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>389</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-08 09:03:28</wp:comment_date>
			<wp:comment_date_gmt>2013-06-08 09:03:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just pushed a new version including social login support, so check it out at GitHub :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>371</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370682208.98087;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>390</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-08 09:04:29</wp:comment_date>
			<wp:comment_date_gmt>2013-06-08 09:04:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, I had a small indentation mess-up in my Jade view, so the link tags were in the body section and not the head. This has been changed, and should be working properly now.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>380</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370682269.173804;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>391</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-08 09:21:58</wp:comment_date>
			<wp:comment_date_gmt>2013-06-08 09:21:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You posted an issue at GitHub, right? I responded there, so let me know there if you're still having problems :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>385</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370683318.22159;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>392</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-08 09:32:46</wp:comment_date>
			<wp:comment_date_gmt>2013-06-08 09:32:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the input, and I realize now that my choice of wording might have been confusing to a lot of people. I tried to make it clear that anything on the client-side can be manipulated by the end user (including the current user's role), and that any sensitive data shouldn't be served up front with the rest of the app. As you say, this is a scheme to tailor the view and provide a better user experience, but it's not dangerous as long as you secure your server-side API properly. I'll edit the post to emphasize this point.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>384</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370683966.4039741;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>394</wp:comment_id>
			<wp:comment_author><![CDATA[Pirzada]]></wp:comment_author>
			<wp:comment_author_email>pirzada.rashid@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>103.12.120.133</wp:comment_author_IP>
			<wp:comment_date>2013-06-08 16:05:58</wp:comment_date>
			<wp:comment_date_gmt>2013-06-08 16:05:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have posted detailed issue I am having on the Github which needs your attention. I will be grateful if you could help. Posted in issue section.

Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>391</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370707558.172864;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>409</wp:comment_id>
			<wp:comment_author><![CDATA[AngularJS - Beginners guide / Yoosuf Muhammad]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://yoosuf.me/blog/angularjs-beginners-guide/</wp:comment_author_url>
			<wp:comment_author_IP>107.23.207.126</wp:comment_author_IP>
			<wp:comment_date>2013-06-10 11:27:07</wp:comment_date>
			<wp:comment_date_gmt>2013-06-10 11:27:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Authentication in Single Page Applications with Angular.js [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370863627.078985;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371376221.487494;s:7:"message";s:41:"admin changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1371376221]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>418</wp:comment_id>
			<wp:comment_author><![CDATA[Dan]]></wp:comment_author>
			<wp:comment_author_email>dksr.esu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.105.98.242</wp:comment_author_IP>
			<wp:comment_date>2013-06-11 18:41:50</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 18:41:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi there this is a really great project. I was wondering if it was possible to serve the client side app completely independant from the server side app? That is, what if I was hosting my SPA from a CDN that just made API calls including the login to the node server? This is also assuming CORS is enabled by both parties.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370976110.4148049;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370979024.5559471;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>419</wp:comment_id>
			<wp:comment_author><![CDATA[Dan]]></wp:comment_author>
			<wp:comment_author_email>dksr.esu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.105.98.242</wp:comment_author_IP>
			<wp:comment_date>2013-06-11 19:16:29</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 19:16:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Pablo, were you able to decouple this project?

Cross domain authentication through an API is basically what I am trying to acheive. Separating the client side app completely from the server is a very attractive solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>234</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370978189.0691199;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370979036.340378;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>421</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-11 21:05:57</wp:comment_date>
			<wp:comment_date_gmt>2013-06-11 21:05:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Dan! Even though I haven't tried it myself, I'm sure you can make it work by using Cross-Origin Resource Sharing. Take a look at this article: https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS
So, on your server API you could create a Node middleware component setting the appropriate HTTP headers detailed in the article. Here's an example I made off the top of my head: https://gist.github.com/fnakstad/5759949
I haven't tested it out so you'll probably have to modify it somewhat, but it might give you a general idea of how it can be done. Let me know how it goes!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>418</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370984757.339571;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>500</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>bob@perfectsolutions.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.129.23.246</wp:comment_author_IP>
			<wp:comment_date>2013-06-18 08:00:05</wp:comment_date>
			<wp:comment_date_gmt>2013-06-18 08:00:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, your article was really helpful but I was wondering how could I go about authenticating using a custom webservice. Would I need to do that through passport or create a new service in angular? I just picked up angular. Thanks in advance!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371542405.130399;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371581790.543654;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>507</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-18 19:04:34</wp:comment_date>
			<wp:comment_date_gmt>2013-06-18 19:04:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Bob! I think I need to learn a little more about your architecture to properly answer this. Is the custom web service you're talking about just used for authentication (Kind of like a Facebook/Twitter Oauth service) or is it part of your own server API which you're using to serve up the Angular application and other resources?

PS! If you check out the GitHub repo and example site, I've implemented both local and social login options, so maybe that can point you in the right direction.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>500</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371582274.3804929;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>508</wp:comment_id>
			<wp:comment_author><![CDATA[Julian Jelfs]]></wp:comment_author>
			<wp:comment_author_email>julian.jelfs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.172.27.132</wp:comment_author_IP>
			<wp:comment_date>2013-06-18 20:01:56</wp:comment_date>
			<wp:comment_date_gmt>2013-06-18 20:01:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you seen this https://github.com/witoldsz/angular-http-auth ?

It's not quite the same as your approach but I think it's a really good solution for the authentication problem with angular and node (though it's not specific to node of course). 

It doesn't solve the authorization problem as you have but it may have ideas that are useful to you to ...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371585716.4129419;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371592235.1592381;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>511</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-06-18 22:01:46</wp:comment_date>
			<wp:comment_date_gmt>2013-06-18 22:01:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've seen it, and it's a really nice and compact solution :)

As far as I can tell, he's intercepting any 401 that the server may return, and then displaying a login form. In particular I like the buffer service he's made which keeps track of any failed HTTP requests, so that they may be retried on successful login.

All in all, I think we have somewhat different approaches to the problem, so which authentication scheme would fit the best really depends on the project.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>508</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371592906.5828569;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>525</wp:comment_id>
			<wp:comment_author><![CDATA[angularjs 学习大礼包大赠送【权威英文版】！ _ Angular _ 小G的大Q]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://gqcui.com/index.php/angularjs-learning-spree-giveaway-english-authority/</wp:comment_author_url>
			<wp:comment_author_IP>113.10.201.30</wp:comment_author_IP>
			<wp:comment_date>2013-06-20 03:19:29</wp:comment_date>
			<wp:comment_date_gmt>2013-06-20 03:19:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Authentication in Single Page Applications with Angular.js [...]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371698369.052398;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371711712.138334;s:7:"message";s:41:"admin changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1371711712]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>533</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas]]></wp:comment_author>
			<wp:comment_author_email>thomas.kremmel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.17.91.124</wp:comment_author_IP>
			<wp:comment_date>2013-06-20 15:22:25</wp:comment_date>
			<wp:comment_date_gmt>2013-06-20 15:22:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Pablo, do you have any success on porting the source to a PhoneGap structure? As this is the most sophisticated approach to angular authentication I have found (still impressed! ) I think about to port the project to a PhoneGap structure. Should not be that difficult.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>239</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371741745.964222;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371797610.8221779;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>737</wp:comment_id>
			<wp:comment_author><![CDATA[Chakras]]></wp:comment_author>
			<wp:comment_author_email>mamieforrester@freenet.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.tumblr.com/blog/spiritualascension</wp:comment_author_url>
			<wp:comment_author_IP>195.13.213.82</wp:comment_author_IP>
			<wp:comment_date>2013-06-28 18:55:09</wp:comment_date>
			<wp:comment_date_gmt>2013-06-28 18:55:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's going to be ending of mine day, but before ending I am reading this impressive piece of writing to improve my know-how.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372445710.0088561;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:60:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:7:"Chakras";s:20:"comment_author_email";s:25:"mamieforrester@freenet.de";s:18:"comment_author_url";s:45:"http://www.tumblr.com/blog/spiritualascension";s:15:"comment_content";s:124:"It's going to be ending of mine day, but before ending I am reading this impressive piece of writing to improve my know-how.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:13:"195.13.213.82";s:10:"user_agent";s:70:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:7:"Chakras";s:10:"POST_email";s:25:"mamieforrester@freenet.de";s:8:"POST_url";s:45:"http://www.tumblr.com/blog/spiritualascension";s:12:"POST_comment";s:124:"It's going to be ending of mine day, but before ending I am reading this impressive piece of writing to improve my know-how.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"e0697155b0";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:15:"HTTP_USER_AGENT";s:70:"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0";s:11:"HTTP_ACCEPT";s:129:"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1";s:20:"HTTP_ACCEPT_LANGUAGE";s:2:"en";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"334";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:13:"195.13.213.82";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"195.13.213.82";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"47717";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1372445709.6053";s:12:"REQUEST_TIME";s:10:"1372445709";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373019586.187974;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>805</wp:comment_id>
			<wp:comment_author><![CDATA[Anil]]></wp:comment_author>
			<wp:comment_author_email>anil.pandey@xymob.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.198.3.40</wp:comment_author_IP>
			<wp:comment_date>2013-07-02 06:18:16</wp:comment_date>
			<wp:comment_date_gmt>2013-07-02 06:18:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi... Your app is awesome but I have one problem. Basically I am using java as a server side so how can I integrate your app with my application.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372745896.4151051;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:62:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:4:"Anil";s:20:"comment_author_email";s:21:"anil.pandey@xymob.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:145:"Hi... Your app is awesome but I have one problem. Basically I am using java as a server side so how can I integrate your app with my application.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:12:"117.198.3.40";s:10:"user_agent";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:4:"Anil";s:10:"POST_email";s:21:"anil.pandey@xymob.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:145:"Hi... Your app is awesome but I have one problem. Basically I am using java as a server side so how can I integrate your app with my application.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"47d64f91ef";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:3:"289";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:12:"117.198.3.40";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"117.198.3.40";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"24135";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1372745895.6792";s:12:"REQUEST_TIME";s:10:"1372745895";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373019588.677479;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>822</wp:comment_id>
			<wp:comment_author><![CDATA[Rafal Pastuszak]]></wp:comment_author>
			<wp:comment_author_email>rafal@paprikka.pl</wp:comment_author_email>
			<wp:comment_author_url>http://flavours.me/rpastuszak</wp:comment_author_url>
			<wp:comment_author_IP>151.237.234.243</wp:comment_author_IP>
			<wp:comment_date>2013-07-04 15:35:40</wp:comment_date>
			<wp:comment_date_gmt>2013-07-04 15:35:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I really liked your article (especially use of bitwise operators), but there's one thing I can't agree with. That is - running a route you're not allowed to access will redirect you to a different place (such as 403 page, login page etc...), but the old controller still will be instantiated and run. Because of that you'll still get <b>two</b> $routeChangeSuccess events fired. Not to mention controller login ran in the background. Cancelling $routeChangeStart won't make any difference.

You should use $locationChangeStart event to cancel redirect, but in this case you won't have access to route properties, such <i>access</i> in your case, so there will be no possible way of checking user privileges against user role list, without creating spaghetti code.

How would you approach this issue?

I  have several ideas, I'm gonna post soon somewhere some of my examples, but, to be honest, none of them would fit in single service which is my goal.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1372952140.0508749;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:62:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:15:"Rafal Pastuszak";s:20:"comment_author_email";s:17:"rafal@paprikka.pl";s:18:"comment_author_url";s:22:"flavours.me/rpastuszak";s:15:"comment_content";s:958:"I really liked your article (especially use of bitwise operators), but there's one thing I can't agree with. That is - running a route you're not allowed to access will redirect you to a different place (such as 403 page, login page etc...), but the old controller still will be instantiated and run. Because of that you'll still get <b>two</b> $routeChangeSuccess events fired. Not to mention controller login ran in the background. Cancelling $routeChangeStart won't make any difference.

You should use $locationChangeStart event to cancel redirect, but in this case you won't have access to route properties, such <i>access</i> in your case, so there will be no possible way of checking user privileges against user role list, without creating spaghetti code.

How would you approach this issue?

I  have several ideas, I'm gonna post soon somewhere some of my examples, but, to be honest, none of them would fit in single service which is my goal.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:15:"151.237.234.243";s:10:"user_agent";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:15:"Rafal Pastuszak";s:10:"POST_email";s:17:"rafal@paprikka.pl";s:8:"POST_url";s:22:"flavours.me/rpastuszak";s:12:"POST_comment";s:958:"I really liked your article (especially use of bitwise operators), but there's one thing I can't agree with. That is - running a route you're not allowed to access will redirect you to a different place (such as 403 page, login page etc...), but the old controller still will be instantiated and run. Because of that you'll still get <b>two</b> $routeChangeSuccess events fired. Not to mention controller login ran in the background. Cancelling $routeChangeStart won't make any difference.

You should use $locationChangeStart event to cancel redirect, but in this case you won't have access to route properties, such <i>access</i> in your case, so there will be no possible way of checking user privileges against user role list, without creating spaghetti code.

How would you approach this issue?

I  have several ideas, I'm gonna post soon somewhere some of my examples, but, to be honest, none of them would fit in single service which is my goal.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"9aebe79606";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:4:"1229";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:32:"pl,fa;q=0.8,en-US;q=0.6,en;q=0.4";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:15:"151.237.234.243";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:15:"151.237.234.243";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"25704";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1372952139.5884";s:12:"REQUEST_TIME";s:10:"1372952139";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373019590.004786;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>830</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>it.is.mini.me@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.129.23.246</wp:comment_author_IP>
			<wp:comment_date>2013-07-05 09:59:17</wp:comment_date>
			<wp:comment_date_gmt>2013-07-05 09:59:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi and thanks for your reply. I have build my back-end in asp.net and have create a service that can be accessed like this: /user/login?username=user&amp;password=pass

This returns an "IsAuthenticated" value as well as the user object.

I see your facebook/twitter/linkedin modules work by using an external login form but i would like to use the same form you use for your local implementation. From a bit poking around, it seems that passportjs supports these out of the box.

What I want to achieve and still struggling a bit in angularjs is to have the user login using this form, then the service will be accessed to check the user's credentials and then I need to save those credentials in the user object if successful.

Thanks in advance for any help you might be able to provide.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>507</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373018357.256624;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:62:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:3:"Bob";s:20:"comment_author_email";s:23:"it.is.mini.me@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:793:"Hi and thanks for your reply. I have build my back-end in asp.net and have create a service that can be accessed like this: /user/login?username=user&password=pass

This returns an "IsAuthenticated" value as well as the user object.

I see your facebook/twitter/linkedin modules work by using an external login form but i would like to use the same form you use for your local implementation. From a bit poking around, it seems that passportjs supports these out of the box.

What I want to achieve and still struggling a bit in angularjs is to have the user login using this form, then the service will be accessed to check the user's credentials and then I need to save those credentials in the user object if successful.

Thanks in advance for any help you might be able to provide.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:507;s:7:"user_ID";i:0;s:7:"user_ip";s:13:"79.129.23.246";s:10:"user_agent";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:3:"Bob";s:10:"POST_email";s:23:"it.is.mini.me@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:793:"Hi and thanks for your reply. I have build my back-end in asp.net and have create a service that can be accessed like this: /user/login?username=user&password=pass

This returns an "IsAuthenticated" value as well as the user object.

I see your facebook/twitter/linkedin modules work by using an external login form but i would like to use the same form you use for your local implementation. From a bit poking around, it seems that passportjs supports these out of the box.

What I want to achieve and still struggling a bit in angularjs is to have the user login using this form, then the service will be accessed to check the user's credentials and then I need to save those credentials in the user object if successful.

Thanks in advance for any help you might be able to provide.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"507";s:26:"POST_akismet_comment_nonce";s:10:"d05f0c5e1d";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:4:"1000";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:35:"en-GB,en;q=0.8,en-US;q=0.6,de;q=0.4";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:13:"79.129.23.246";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"79.129.23.246";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"42323";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1373018356.4569";s:12:"REQUEST_TIME";s:10:"1373018356";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373019591.278527;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>831</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-07-05 10:25:28</wp:comment_date>
			<wp:comment_date_gmt>2013-07-05 10:25:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Anil! Unfortunately I don't have the time to make detailed examples for every kind of possible server backend, but basically if you want to use the example as it is you need to mirror the same functionality I have in my Node.js server. 

If you check out the GithHub example you will see what routes/URL's I have set up, what kind of JSON documents they return, and so on. Let me know if you figure it out!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>805</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373019928.9858561;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:63:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:5:"admin";s:20:"comment_author_email";s:17:"nakstad@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:411:"Hi Anil! Unfortunately I don't have the time to make detailed examples for every kind of possible server backend, but basically if you want to use the example as it is you need to mirror the same functionality I have in my Node.js server. 

If you check out the GithHub example you will see what routes/URL's I have set up, what kind of JSON documents they return, and so on. Let me know if you figure it out!";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:805;s:7:"user_ID";i:1;s:7:"user_ip";s:12:"94.246.40.35";s:10:"user_agent";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:411:"Hi Anil! Unfortunately I don't have the time to make detailed examples for every kind of possible server backend, but basically if you want to use the example as it is you need to mirror the same functionality I have in my Node.js server. 

If you check out the GithHub example you will see what routes/URL's I have set up, what kind of JSON documents they return, and so on. Let me know if you figure it out!";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"805";s:32:"POST__wp_unfiltered_html_comment";s:10:"6513dbaf57";s:26:"POST_akismet_comment_nonce";s:10:"90fa1b55a8";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:3:"573";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:8:"HTTP_DNT";s:1:"1";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:41:"en-US,en;q=0.8,no;q=0.6,ja;q=0.4,de;q=0.2";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:12:"94.246.40.35";s:11:"HTTP_COOKIE";s:0:"";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"94.246.40.35";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"63490";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1373019927.9459";s:12:"REQUEST_TIME";s:10:"1373019927";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>832</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-07-05 10:33:47</wp:comment_date>
			<wp:comment_date_gmt>2013-07-05 10:33:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Rafal, and thank you for sharing your ideas.

I'm trying to reproduce the problem you mentioned by putting a breakpoint inside of a controller, and then accessing its URL directly after logging in with a user who does not have access to that route. However, the breakpoint never seems to be hit... Could you tell me how you were able to reproduce this behaviour?

Also, I hope you'll check out the GitHub example as I've been doing some heavy refactoring and moved all functionality that previously was tied to the <code>$rootScope</code> into the Auth service. I'll probably have to rewrite this blogpost since there have been so many changes :)

Anyway, issues and pull requests are very welcome, so feel free to contribute!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>822</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373020427.418515;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:63:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:5:"admin";s:20:"comment_author_email";s:17:"nakstad@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:735:"Hi Rafal, and thank you for sharing your ideas.

I'm trying to reproduce the problem you mentioned by putting a breakpoint inside of a controller, and then accessing its URL directly after logging in with a user who does not have access to that route. However, the breakpoint never seems to be hit... Could you tell me how you were able to reproduce this behaviour?

Also, I hope you'll check out the GitHub example as I've been doing some heavy refactoring and moved all functionality that previously was tied to the <code>$rootScope</code> into the Auth service. I'll probably have to rewrite this blogpost since there have been so many changes :)

Anyway, issues and pull requests are very welcome, so feel free to contribute!";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:822;s:7:"user_ID";i:1;s:7:"user_ip";s:12:"94.246.40.35";s:10:"user_agent";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:735:"Hi Rafal, and thank you for sharing your ideas.

I'm trying to reproduce the problem you mentioned by putting a breakpoint inside of a controller, and then accessing its URL directly after logging in with a user who does not have access to that route. However, the breakpoint never seems to be hit... Could you tell me how you were able to reproduce this behaviour?

Also, I hope you'll check out the GitHub example as I've been doing some heavy refactoring and moved all functionality that previously was tied to the <code>$rootScope</code> into the Auth service. I'll probably have to rewrite this blogpost since there have been so many changes :)

Anyway, issues and pull requests are very welcome, so feel free to contribute!";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"822";s:32:"POST__wp_unfiltered_html_comment";s:10:"6513dbaf57";s:26:"POST_akismet_comment_nonce";s:10:"90fa1b55a8";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:3:"937";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:8:"HTTP_DNT";s:1:"1";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:41:"en-US,en;q=0.8,no;q=0.6,ja;q=0.4,de;q=0.2";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:12:"94.246.40.35";s:11:"HTTP_COOKIE";s:0:"";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"94.246.40.35";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"57830";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1373020426.9121";s:12:"REQUEST_TIME";s:10:"1373020426";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>834</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-07-05 10:45:12</wp:comment_date>
			<wp:comment_date_gmt>2013-07-05 10:45:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Bob! How's your application coming along?`

Judging by your login URL you are using a HTTP GET to post the login request with the login data as part of the query string. However, the login form in my example sends a HTTP POST request when attempting to log in or register a new user. So, if you expect to receive a HTTP GET on your server backend, the HTTP POST submitted by the client won't be picked up by the correct route on your server.

I would suggest you use an HTTP POST on your server backend instead so you can put the username and password fields in the request body instead of the query string. This way login data will be less visible to other people watching the same monitor, and the URL with the query string won't be cached.

That's my first suggestion, but let me know if this didn't solve your problem.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>830</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373021112.2226679;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:63:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:5:"admin";s:20:"comment_author_email";s:17:"nakstad@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:831:"Hi Bob! How's your application coming along?`

Judging by your login URL you are using a HTTP GET to post the login request with the login data as part of the query string. However, the login form in my example sends a HTTP POST request when attempting to log in or register a new user. So, if you expect to receive a HTTP GET on your server backend, the HTTP POST submitted by the client won't be picked up by the correct route on your server.

I would suggest you use an HTTP POST on your server backend instead so you can put the username and password fields in the request body instead of the query string. This way login data will be less visible to other people watching the same monitor, and the URL with the query string won't be cached.

That's my first suggestion, but let me know if this didn't solve your problem.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:830;s:7:"user_ID";i:1;s:7:"user_ip";s:12:"94.246.40.35";s:10:"user_agent";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:831:"Hi Bob! How's your application coming along?`

Judging by your login URL you are using a HTTP GET to post the login request with the login data as part of the query string. However, the login form in my example sends a HTTP POST request when attempting to log in or register a new user. So, if you expect to receive a HTTP GET on your server backend, the HTTP POST submitted by the client won't be picked up by the correct route on your server.

I would suggest you use an HTTP POST on your server backend instead so you can put the username and password fields in the request body instead of the query string. This way login data will be less visible to other people watching the same monitor, and the URL with the query string won't be cached.

That's my first suggestion, but let me know if this didn't solve your problem.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"830";s:32:"POST__wp_unfiltered_html_comment";s:10:"6513dbaf57";s:26:"POST_akismet_comment_nonce";s:10:"90fa1b55a8";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:4:"1019";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:8:"HTTP_DNT";s:1:"1";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:41:"en-US,en;q=0.8,no;q=0.6,ja;q=0.4,de;q=0.2";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:12:"94.246.40.35";s:11:"HTTP_COOKIE";s:0:"";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"94.246.40.35";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"21733";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1373021111.7652";s:12:"REQUEST_TIME";s:10:"1373021111";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>836</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>it.is.mini.me@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.129.23.246</wp:comment_author_IP>
			<wp:comment_date>2013-07-05 11:14:00</wp:comment_date>
			<wp:comment_date_gmt>2013-07-05 11:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, and thanks for asking! I had to put it on hold due to school but I'm picking it up again.

I probably worded it incorrectly, apologies for my bad English.

I'm not submitting my form to that URL if that's what you're saying. I would like to keep the same setup as you have now and instead of passport checking locally, to check that service instead maybe via $ngresource or $http? Or maybe passport has some built in functionality?

Ideally what I want to achieve is to hide my whole app behind the login screen (make it restricted). When the user logs in, the api is checked and the user is logged in or gets an error. I'm not interested in supporting registration or any other 3rd party authentication.

The back-end API was build by a friend in asp.net and one of the web services provided is  the one I linked above used to start his sessions.

I hope I have explained things cleared now and again thanks for your replies.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>834</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373022840.8226531;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:63:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:3:"Bob";s:20:"comment_author_email";s:23:"it.is.mini.me@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:940:"Hi, and thanks for asking! I had to put it on hold due to school but I'm picking it up again.

I probably worded it incorrectly, apologies for my bad English.

I'm not submitting my form to that URL if that's what you're saying. I would like to keep the same setup as you have now and instead of passport checking locally, to check that service instead maybe via $ngresource or $http? Or maybe passport has some built in functionality?

Ideally what I want to achieve is to hide my whole app behind the login screen (make it restricted). When the user logs in, the api is checked and the user is logged in or gets an error. I'm not interested in supporting registration or any other 3rd party authentication.

The back-end API was build by a friend in asp.net and one of the web services provided is  the one I linked above used to start his sessions.

I hope I have explained things cleared now and again thanks for your replies.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:834;s:7:"user_ID";i:0;s:7:"user_ip";s:13:"79.129.23.246";s:10:"user_agent";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:3:"Bob";s:10:"POST_email";s:23:"it.is.mini.me@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:940:"Hi, and thanks for asking! I had to put it on hold due to school but I'm picking it up again.

I probably worded it incorrectly, apologies for my bad English.

I'm not submitting my form to that URL if that's what you're saying. I would like to keep the same setup as you have now and instead of passport checking locally, to check that service instead maybe via $ngresource or $http? Or maybe passport has some built in functionality?

Ideally what I want to achieve is to hide my whole app behind the login screen (make it restricted). When the user logs in, the api is checked and the user is logged in or gets an error. I'm not interested in supporting registration or any other 3rd party authentication.

The back-end API was build by a friend in asp.net and one of the web services provided is  the one I linked above used to start his sessions.

I hope I have explained things cleared now and again thanks for your replies.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"834";s:26:"POST_akismet_comment_nonce";s:10:"d05f0c5e1d";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:4:"1159";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:35:"en-GB,en;q=0.8,en-US;q=0.6,de;q=0.4";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:13:"79.129.23.246";s:11:"HTTP_COOKIE";s:0:"";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"79.129.23.246";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"52142";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1373022839.9862";s:12:"REQUEST_TIME";s:10:"1373022839";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>878</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-07-07 13:23:28</wp:comment_date>
			<wp:comment_date_gmt>2013-07-07 13:23:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah, I think I understand now. So, the server API you want users to be authenticated against is completely detached from the server you're using to server the Angular application, right? In that case you can use the $http service to call your friend's authentication URL, and he needs to make sure that the HTTP request sets right access-control headers. Check out this <a href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Requests_with_credentials" rel="nofollow">link</a>, and also my responses to Pablo and Dan above.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>830</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373203408.0645771;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:63:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:5:"admin";s:20:"comment_author_email";s:17:"nakstad@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:526:"Ah, I think I understand now. So, the server API you want users to be authenticated against is completely detached from the server you're using to server the Angular application, right? In that case you can use the $http service to call your friend's authentication URL, and he needs to make sure that the HTTP request sets right access-control headers. Check out this <a href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Requests_with_credentials">link</a>, and also my responses to Pablo and Dan above.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:830;s:7:"user_ID";i:1;s:7:"user_ip";s:12:"94.246.40.35";s:10:"user_agent";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:526:"Ah, I think I understand now. So, the server API you want users to be authenticated against is completely detached from the server you're using to server the Angular application, right? In that case you can use the $http service to call your friend's authentication URL, and he needs to make sure that the HTTP request sets right access-control headers. Check out this <a href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Requests_with_credentials">link</a>, and also my responses to Pablo and Dan above.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"830";s:32:"POST__wp_unfiltered_html_comment";s:10:"635827d705";s:26:"POST_akismet_comment_nonce";s:10:"5adc13c2be";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:3:"714";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:8:"HTTP_DNT";s:1:"1";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:41:"en-US,en;q=0.8,no;q=0.6,ja;q=0.4,de;q=0.2";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:12:"94.246.40.35";s:11:"HTTP_COOKIE";s:0:"";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"94.246.40.35";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"32977";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:14:"1373203407.235";s:12:"REQUEST_TIME";s:10:"1373203407";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>899</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>it.is.mini.me@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.129.23.246</wp:comment_author_IP>
			<wp:comment_date>2013-07-08 10:34:55</wp:comment_date>
			<wp:comment_date_gmt>2013-07-08 10:34:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi again. I think that's a bit too advanced for me.. but I'm trying to understand it. So should I be dismissing the whole setup you have created through Passport or should I integrate it in there?

The above web service, returns JSON data with the user's credentials if the username and password is correct. And that user data would be saved in a cookie, similar to how it's done in your auth.js controller.

Am I approaching this incorrectly?

Thanks again for your time and replies.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>878</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373279695.0852261;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:62:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:3:"Bob";s:20:"comment_author_email";s:23:"it.is.mini.me@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:490:"Hi again. I think that's a bit too advanced for me.. but I'm trying to understand it. So should I be dismissing the whole setup you have created through Passport or should I integrate it in there?

The above web service, returns JSON data with the user's credentials if the username and password is correct. And that user data would be saved in a cookie, similar to how it's done in your auth.js controller.

Am I approaching this incorrectly?

Thanks again for your time and replies.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:878;s:7:"user_ID";i:0;s:7:"user_ip";s:13:"79.129.23.246";s:10:"user_agent";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:3:"Bob";s:10:"POST_email";s:23:"it.is.mini.me@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:490:"Hi again. I think that's a bit too advanced for me.. but I'm trying to understand it. So should I be dismissing the whole setup you have created through Passport or should I integrate it in there?

The above web service, returns JSON data with the user's credentials if the username and password is correct. And that user data would be saved in a cookie, similar to how it's done in your auth.js controller.

Am I approaching this incorrectly?

Thanks again for your time and replies.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"878";s:26:"POST_akismet_comment_nonce";s:10:"31158cb107";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:3:"677";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:102:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:35:"en-GB,en;q=0.8,en-US;q=0.6,de;q=0.4";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:13:"79.129.23.246";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"79.129.23.246";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"17573";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1373279694.2857";s:12:"REQUEST_TIME";s:10:"1373279694";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>907</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-07-08 20:47:46</wp:comment_date>
			<wp:comment_date_gmt>2013-07-08 20:47:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's right! If you want to authenticate against your friend's ASP.NET server you don't need Passport at all. Actually, if you're set on using ASP.NET, I'd recommend you scrap the Node.js server completely and just serve the Angular application from the ASP.NET server. That way you don't need to bother with CORS headers either, but the downside is that you won't be able to use the routingConfig.js module on the server-side and must replicate it in C#.

Another quick heads-up: the authentication HTTP request shouldn't set the authentication cookie with credentials in plain-text. This is very dangerous if your application experiences <a href="http://en.wikipedia.org/wiki/HTTP_cookie#Cross-site_scripting_.E2.80.93_cookie_theft" rel="nofollow">XSS attacks</a>. The authentication cookie should be encrypted by the issuing server and preferrably be set as a <a href="http://www.codinghorror.com/blog/2008/08/protecting-your-cookies-httponly.html" rel="nofollow">HTTPOnly cookie</a>.

Let me know if anything still is unclear, and I'll try to explain better.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>830</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373316466.253819;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:63:{s:15:"comment_post_ID";i:34;s:14:"comment_author";s:5:"admin";s:20:"comment_author_email";s:17:"nakstad@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:1037:"That's right! If you want to authenticate against your friend's ASP.NET server you don't need Passport at all. Actually, if you're set on using ASP.NET, I'd recommend you scrap the Node.js server completely and just serve the Angular application from the ASP.NET server. That way you don't need to bother with CORS headers either, but the downside is that you won't be able to use the routingConfig.js module on the server-side and must replicate it in C#.

Another quick heads-up: the authentication HTTP request shouldn't set the authentication cookie with credentials in plain-text. This is very dangerous if your application experiences <a href="http://en.wikipedia.org/wiki/HTTP_cookie#Cross-site_scripting_.E2.80.93_cookie_theft">XSS attacks</a>. The authentication cookie should be encrypted by the issuing server and preferrably be set as a <a href="http://www.codinghorror.com/blog/2008/08/protecting-your-cookies-httponly.html">HTTPOnly cookie</a>.

Let me know if anything still is unclear, and I'll try to explain better.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:830;s:7:"user_ID";i:1;s:7:"user_ip";s:12:"94.246.40.35";s:10:"user_agent";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:8:"referrer";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:4:"blog";s:30:"http://www.frederiknakstad.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:1037:"That's right! If you want to authenticate against your friend's ASP.NET server you don't need Passport at all. Actually, if you're set on using ASP.NET, I'd recommend you scrap the Node.js server completely and just serve the Angular application from the ASP.NET server. That way you don't need to bother with CORS headers either, but the downside is that you won't be able to use the routingConfig.js module on the server-side and must replicate it in C#.

Another quick heads-up: the authentication HTTP request shouldn't set the authentication cookie with credentials in plain-text. This is very dangerous if your application experiences <a href="http://en.wikipedia.org/wiki/HTTP_cookie#Cross-site_scripting_.E2.80.93_cookie_theft">XSS attacks</a>. The authentication cookie should be encrypted by the issuing server and preferrably be set as a <a href="http://www.codinghorror.com/blog/2008/08/protecting-your-cookies-httponly.html">HTTPOnly cookie</a>.

Let me know if anything still is unclear, and I'll try to explain better.";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:2:"34";s:19:"POST_comment_parent";s:3:"830";s:32:"POST__wp_unfiltered_html_comment";s:10:"31a5344afe";s:26:"POST_akismet_comment_nonce";s:10:"1b21a56051";s:15:"SERVER_SOFTWARE";s:12:"Apache/2.4.4";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"USER";s:12:"hosting-user";s:4:"HOME";s:1:"/";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:14:"CONTENT_LENGTH";s:4:"1281";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:30:"http://www.frederiknakstad.com";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:8:"HTTP_DNT";s:1:"1";s:12:"HTTP_REFERER";s:90:"http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/";s:20:"HTTP_ACCEPT_LANGUAGE";s:41:"en-US,en;q=0.8,no;q=0.6,ja;q=0.4,de;q=0.2";s:9:"HTTP_HOST";s:23:"www.frederiknakstad.com";s:20:"HTTP_X_FORWARDED_FOR";s:12:"94.246.40.35";s:11:"HTTP_COOKIE";s:0:"";s:25:"HTTP_SURROGATE_CAPABILITY";s:15:"varnish=ESI/1.0";s:4:"PATH";s:33:"/usr/sbin/:/usr/bin/:/sbin/:/bin/";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:23:"www.frederiknakstad.com";s:11:"SERVER_ADDR";s:12:"172.17.8.221";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"94.246.40.35";s:13:"DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:51:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:72:"/srv/data/web/vhosts/www.frederiknakstad.com/htdocs/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"56903";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:18:"REQUEST_TIME_FLOAT";s:15:"1373316465.5469";s:12:"REQUEST_TIME";s:10:"1373316465";s:25:"comment_post_modified_gmt";s:19:"2013-06-16 10:14:23";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Dave Brubeck</title>
		<link>http://www.frederiknakstad.com/dave-brubeck/</link>
		<pubDate>Thu, 06 Dec 2012 22:32:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[Dave Brubeck has passed away, and I felt compelled to share a few thoughts about the man and his music. I first heard about him when a friend of mine in Tennessee played some songs off the album Take Five for me. I had heard the song the album takes its name from before and associated with a Norwegian commercial for café cookies, so I wasn't too thrilled about it. However, after hearing the song in its entirety and enjoying the excellent solo performances of Paul Desmond and Joe Morello I could tell there was something more to it than the pickled and processed 20 second cut I had heard earlier. One of my absolute favorite drum solos ever has been performed as part of this song:

[embed]http://youtu.be/tsKq3HD0EFc[/embed]

Blue Rondo alá Turk was more of an immediate revelation the first time I heard it, and really shows off Brubeck's own chops. It's probably the second most famous song off of the album, and for good reason. It, like Take Five, has an immediately recognizable melody, but manages at the same time to be interesting enough for repeated listens. I'll leave you with a slightly less known track off the album, which really embodies the honesty and playful tone I love about his music. Rest in peace, Dave. You had a good run.

[embed]http://youtu.be/4Ro8-NOiMBY[/embed]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2012-12-06 22:32:15</wp:post_date>
		<wp:post_date_gmt>2012-12-06 22:32:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dave-brubeck</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="music"><![CDATA[Music]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_488bca03bc1824c3f491ee09f6960dd5</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="500" height="375" src="http://www.youtube.com/embed/tsKq3HD0EFc?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4aa3e26e5a5b14ec41853caa37d9a607</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="500" height="375" src="http://www.youtube.com/embed/4Ro8-NOiMBY?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Solar System - 太陽系</title>
		<link>http://www.frederiknakstad.com/the-solar-system-%e5%a4%aa%e9%99%bd%e7%b3%bb/</link>
		<pubDate>Sun, 23 Dec 2012 17:37:52 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[While reading a Japanese text today, I ran into a sentence mentioning the planet Venus. In Japanese Venus is known as <ruby><rb>金星</rb><rt>きんせい</rt></ruby>, the kanji meaning "gold/metal" and "star" respectively. I decided to check out the other planet names of our solar system, and found out that they follow a naming pattern very close to how Japanese week days are named.  Just like the Japanese weekdays, many of the planets in our solar system are associated with an element like water, fire, and so on. Just see for yourself:
<table>
<tbody>
<tr>
<th><ruby><rb>日本語</rb><rt>にほんご</rt></ruby></th>
<th>English</th>
<th></th>
</tr>
<tr>
<td><ruby><rb>太陽</rb><rt>たいよう</rt></ruby></td>
<td>Sun</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>水星</rb><rt>すいせい</rt></ruby></td>
<td>Mercury</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>金星</rb><rt>きんせい</rt></ruby></td>
<td>Venus</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>地球</rb><rt>ちきゅう</rt></ruby></td>
<td>Earth</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>火星</rb><rt>かせい</rt></ruby></td>
<td>Mars</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>木星</rb><rt>もくせい</rt></ruby></td>
<td>Jupiter</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>土星</rb><rt>どせい</rt></ruby></td>
<td>Saturn</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>天王星</rb><rt>てんおうせい</rt></ruby></td>
<td>Uranus</td>
<td></td>
</tr>
<tr>
<td><ruby><rb>海王星</rb><rt>かいおうせい</rt></ruby></td>
<td>Neptune</td>
<td></td>
</tr>
</tbody>
</table>
So, if you disregard the sun and earth all but two of the planets are associated with an element. The origin for this naming scheme, I found out, is the concept of <a href="http://en.wikipedia.org/wiki/Wu_Xing">Wu Xing</a> which is prevalent in several Eastern Asian cultures. Wu Xing is a system for dividing different natural phenomena into five different phases corresponding to what the Chinese thought to be the five basic elements of nature: wood, fire, earth, metal, and water. This system was used to describe anything from cosmic cycles to musical notation and anatomical processes. Thus, according to this system, Mercury is associated with water (水), Venus with gold/metal (金), Mars with fire (火), Jupiter with wood (木), and Saturn with earth (土).

However, that means there are no elements left to assign to Uranus and Neptune... Since these two planets were discovered relatively recently, their names are simply translations from their Roman and Greek counterparts. Since Uranus was the Greek god of the sky, they decided to use 天王 in its name, meaning "heaven" and "king". Neptune, also known as the Roman god of the sea, was named using 海王, meaning "sea" and "king".

Knowing the history behind the names should be really helpful in memorizing them! In concluding this post, I'd like to list some other astronomical terms I came across:
<table border="0">
<tbody>
<tr>
<th><ruby><rb>日本語</rb><rt>にほんご</rt></ruby></th>
<th>English</th>
</tr>
<tr>
<td><ruby><rb>月</rb><rt>つき</rt></ruby></td>
<td>Moon</td>
</tr>
<tr>
<td> <ruby><rb>惑星</rb><rt>わくせい</rt></ruby></td>
<td> Planet</td>
</tr>
<tr>
<td><ruby><rb>星</rb><rt>ほし</rt></ruby></td>
<td>Star</td>
</tr>
<tr>
<td><ruby><rb>太陽系</rb><rt>たいようけい</rt></ruby></td>
<td>Solar System</td>
</tr>
<tr>
<td><ruby><rb>銀河系</rb><rt>ぎんがけい</rt></ruby></td>
<td>Galaxy</td>
</tr>
<tr>
<td><ruby><rb>小惑星</rb><rt>しょうわくせい</rt></ruby></td>
<td>Asteroid</td>
</tr>
<tr>
<td><ruby><rb>小惑星帯</rb><rt>しょうわくせいたい</rt></ruby></td>
<td>Asteroid belt</td>
</tr>
<tr>
<td><ruby><rb>彗星</rb><rt>すいせい</rt></ruby></td>
<td>Comet</td>
</tr>
<tr>
<td><ruby><rb>流星</rb><rt>りゅうせい</rt></ruby></td>
<td>Meteor</td>
</tr>
<tr>
<td><ruby><rb>隕石</rb><rt>いんせき</rt></ruby></td>
<td>Meteorite</td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2012-12-23 17:37:52</wp:post_date>
		<wp:post_date_gmt>2012-12-23 17:37:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-solar-system-%e5%a4%aa%e9%99%bd%e7%b3%bb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="astronomy"><![CDATA[Astronomy]]></category>
		<category domain="category" nicename="japanese"><![CDATA[Japanese]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Asuka]]></wp:comment_author>
			<wp:comment_author_email>seraphxxx1001@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ameblo.jp/stjarna-i-himininn/</wp:comment_author_url>
			<wp:comment_author_IP>210.20.102.73</wp:comment_author_IP>
			<wp:comment_date>2013-01-17 04:11:48</wp:comment_date>
			<wp:comment_date_gmt>2013-01-17 04:11:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[すごく興味深かった　：）
海王星の次に、冥王星っていうのも昔あったけど、これは惑星から外されたよね…
私は冥王星Plutoの名前が好きだったから、少しさみしいな。（冥means darkness, posthumous or mystery)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358395908.7143891;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358441857.4724989;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.246.40.35</wp:comment_author_IP>
			<wp:comment_date>2013-01-17 17:05:17</wp:comment_date>
			<wp:comment_date_gmt>2013-01-17 17:05:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[僕も子供の時から冥王星が好きなのに。。。小さすぎて残念だなあ :P
でも、小惑星帯には冥王星より大きい小惑星があるから、しょうがない！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>10</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358442317.7592449;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>wild_oliva</title>
		<link>http://www.frederiknakstad.com/?attachment_id=94</link>
		<pubDate>Sun, 23 Dec 2012 22:51:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/wild_oliva.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2012-12-23 22:51:41</wp:post_date>
		<wp:post_date_gmt>2012-12-23 22:51:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wild_oliva</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/wild_oliva.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/wild_oliva.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:198;s:6:"height";i:200;s:4:"file";s:22:"2012/12/wild_oliva.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"wild_oliva-198x150.png";s:5:"width";i:198;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"wild_oliva-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:22:"wild_oliva-198x146.png";s:5:"width";i:198;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>low_contrast_linen_green</title>
		<link>http://www.frederiknakstad.com/?attachment_id=95</link>
		<pubDate>Sun, 23 Dec 2012 22:54:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/low_contrast_linen_green.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2012-12-23 22:54:41</wp:post_date>
		<wp:post_date_gmt>2012-12-23 22:54:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>low_contrast_linen_green</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/low_contrast_linen_green.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/low_contrast_linen_green.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:36:"2012/12/low_contrast_linen_green.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"low_contrast_linen_green-200x150.png";s:5:"width";i:200;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"low_contrast_linen_green-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:36:"low_contrast_linen_green-220x146.png";s:5:"width";i:220;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:3:"six";a:4:{s:4:"file";s:36:"low_contrast_linen_green-256x226.png";s:5:"width";i:256;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gplaypattern_green</title>
		<link>http://www.frederiknakstad.com/?attachment_id=96</link>
		<pubDate>Sun, 23 Dec 2012 22:56:42 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_green.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2012-12-23 22:56:42</wp:post_date>
		<wp:post_date_gmt>2012-12-23 22:56:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gplaypattern_green</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_green.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/gplaypattern_green.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:188;s:6:"height";i:178;s:4:"file";s:30:"2012/12/gplaypattern_green.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"gplaypattern_green-188x150.png";s:5:"width";i:188;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"gplaypattern_green-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:30:"gplaypattern_green-188x146.png";s:5:"width";i:188;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gplaypattern_brown</title>
		<link>http://www.frederiknakstad.com/?attachment_id=97</link>
		<pubDate>Sun, 23 Dec 2012 22:59:09 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_brown.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2012-12-23 22:59:09</wp:post_date>
		<wp:post_date_gmt>2012-12-23 22:59:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gplaypattern_brown</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_brown.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/gplaypattern_brown.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:188;s:6:"height";i:178;s:4:"file";s:30:"2012/12/gplaypattern_brown.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"gplaypattern_brown-188x150.png";s:5:"width";i:188;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"gplaypattern_brown-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:30:"gplaypattern_brown-188x146.png";s:5:"width";i:188;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gplaypattern_green</title>
		<link>http://www.frederiknakstad.com/?attachment_id=98</link>
		<pubDate>Sun, 23 Dec 2012 23:06:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_green1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2012-12-23 23:06:41</wp:post_date>
		<wp:post_date_gmt>2012-12-23 23:06:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gplaypattern_green-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_green1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/gplaypattern_green1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:188;s:6:"height";i:178;s:4:"file";s:31:"2012/12/gplaypattern_green1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"gplaypattern_green1-188x150.png";s:5:"width";i:188;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"gplaypattern_green1-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:31:"gplaypattern_green1-188x146.png";s:5:"width";i:188;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gplaypattern_brown</title>
		<link>http://www.frederiknakstad.com/?attachment_id=99</link>
		<pubDate>Sun, 23 Dec 2012 23:09:48 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_brown1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2012-12-23 23:09:48</wp:post_date>
		<wp:post_date_gmt>2012-12-23 23:09:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gplaypattern_brown-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/gplaypattern_brown1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/gplaypattern_brown1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:188;s:6:"height";i:178;s:4:"file";s:31:"2012/12/gplaypattern_brown1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"gplaypattern_brown1-188x150.png";s:5:"width";i:188;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"gplaypattern_brown1-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:31:"gplaypattern_brown1-188x146.png";s:5:"width";i:188;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>little_pluses</title>
		<link>http://www.frederiknakstad.com/?attachment_id=101</link>
		<pubDate>Mon, 24 Dec 2012 15:24:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/little_pluses.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2012-12-24 15:24:06</wp:post_date>
		<wp:post_date_gmt>2012-12-24 15:24:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>little_pluses</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/little_pluses.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/little_pluses.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:300;s:4:"file";s:25:"2012/12/little_pluses.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"little_pluses-200x150.png";s:5:"width";i:200;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"little_pluses-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:25:"little_pluses-220x146.png";s:5:"width";i:220;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:3:"six";a:4:{s:4:"file";s:25:"little_pluses-300x226.png";s:5:"width";i:300;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>scribble_light</title>
		<link>http://www.frederiknakstad.com/?attachment_id=102</link>
		<pubDate>Mon, 24 Dec 2012 15:25:43 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2012/12/scribble_light.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2012-12-24 15:25:43</wp:post_date>
		<wp:post_date_gmt>2012-12-24 15:25:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scribble_light</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2012/12/scribble_light.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/scribble_light.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:304;s:6:"height";i:306;s:4:"file";s:26:"2012/12/scribble_light.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"scribble_light-200x150.png";s:5:"width";i:200;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"scribble_light-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:26:"scribble_light-220x146.png";s:5:"width";i:220;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:3:"six";a:4:{s:4:"file";s:26:"scribble_light-304x226.png";s:5:"width";i:304;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}s:5:"eight";a:4:{s:4:"file";s:26:"scribble_light-304x300.png";s:5:"width";i:304;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>escheresque_ste_@2X.png</title>
		<link>http://www.frederiknakstad.com/?attachment_id=248</link>
		<pubDate>Fri, 12 Apr 2013 21:01:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2013/04/escheresque_ste_@2X.png</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.frederiknakstad.com/wp-content/uploads/2013/04/escheresque_ste_@2X.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2013-04-12 21:01:16</wp:post_date>
		<wp:post_date_gmt>2013-04-12 21:01:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>escheresque_ste_2x-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2013/04/escheresque_ste_@2X.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/escheresque_ste_@2X.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:92;s:6:"height";i:58;s:4:"file";s:31:"2013/04/escheresque_ste_@2X.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>escheresque_ste.png</title>
		<link>http://www.frederiknakstad.com/?attachment_id=249</link>
		<pubDate>Fri, 12 Apr 2013 21:02:30 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2013/04/escheresque_ste.png</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.frederiknakstad.com/wp-content/uploads/2013/04/escheresque_ste.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date>2013-04-12 21:02:30</wp:post_date>
		<wp:post_date_gmt>2013-04-12 21:02:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>escheresque_ste-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2013/04/escheresque_ste.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/escheresque_ste.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:46;s:6:"height";i:29;s:4:"file";s:27:"2013/04/escheresque_ste.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ps_neutral</title>
		<link>http://www.frederiknakstad.com/awkward-change-flow-or-how-i-learned-to-stop-worrying-and-love-the-application-cache/ps_neutral/</link>
		<pubDate>Mon, 06 May 2013 22:40:43 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2013/05/ps_neutral.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2013-05-06 22:40:43</wp:post_date>
		<wp:post_date_gmt>2013-05-06 22:40:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ps_neutral</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>177</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2013/05/ps_neutral.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/ps_neutral.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:16;s:6:"height";i:16;s:4:"file";s:22:"2013/05/ps_neutral.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[pixelpower]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>appCache_stateDiag</title>
		<link>http://www.frederiknakstad.com/awkward-change-flow-or-how-i-learned-to-stop-worrying-and-love-the-application-cache/appcache_statediag/</link>
		<pubDate>Mon, 20 May 2013 18:30:39 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2013/05/appCache_stateDiag.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2013-05-20 18:30:39</wp:post_date>
		<wp:post_date_gmt>2013-05-20 18:30:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>appcache_statediag</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>177</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2013/05/appCache_stateDiag.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/appCache_stateDiag.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1221;s:6:"height";i:1096;s:4:"file";s:30:"2013/05/appCache_stateDiag.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"appCache_stateDiag-200x150.png";s:5:"width";i:200;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"appCache_stateDiag-495x444.png";s:5:"width";i:495;s:6:"height";i:444;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:30:"appCache_stateDiag-950x852.png";s:5:"width";i:950;s:6:"height";i:852;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"appCache_stateDiag-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:30:"appCache_stateDiag-220x146.png";s:5:"width";i:220;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:3:"six";a:4:{s:4:"file";s:30:"appCache_stateDiag-340x226.png";s:5:"width";i:340;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}s:5:"eight";a:4:{s:4:"file";s:30:"appCache_stateDiag-460x300.png";s:5:"width";i:460;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:6:"twelve";a:4:{s:4:"file";s:30:"appCache_stateDiag-700x466.png";s:5:"width";i:700;s:6:"height";i:466;s:9:"mime-type";s:9:"image/png";}s:7:"sixteen";a:4:{s:4:"file";s:30:"appCache_stateDiag-940x625.png";s:5:"width";i:940;s:6:"height";i:625;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Authentication in Single Page Applications with Angular.js Part 2</title>
		<link>http://www.frederiknakstad.com/?p=360</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[As you may have gathered from the title, this is a follow-up to <a href="http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/">a post I wrote a some time ago</a> regarding role-based authentication/authorization in single page applications. This time I'd like to highlight how I implemented the server-side code that complements my client-side solution. 

<strong>Since you can never trust that the requests you get from the client haven't been tampered with, it's paramount to have a good authentication/authorization strategy on the server. The client-side authentication scheme I introduced earlier is simply a convenient way to adapt the user interface - proper authentication/authorization should always be left up to the server-side.</strong> 

I am using Node.js/Express along with the excellent Passport.js authentication middleware, but hopefully it shouldn't be too much bother to apply the same patterns to other server-side frameworks. You can see an example of this scheme implemented in <a href="https://github.com/fnakstad/angular-client-side-auth">this GitHub repo</a>, and I have a live version of it <a href="http://angular-client-side-auth.herokuapp.com/">running on Heroku</a>. Well, let's get right to it!

Node.js/Express is very non-prescriptive in terms of telling you how to lay out your code, so I'll try to give a quick overview how I lay out my projects first. When working with Node.js/Angular I usually divide my code into server and client directories, and then split my server side code into controllers and models. so my directory structure usually looks something like this:

<a href="http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png"><img src="http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png" alt="project_layout" width="381" height="404" class="aligncenter size-full wp-image-404" /></a>

So, the <strong>client</strong> directory contains all my client-side Javascript (including all my Angular.js code), HTML, and CSS resources. The client folder is served as a static directory structure. My <strong>server</strong> directory contains the code for defining my REST API. 

The entry point is the <strong>server.js</strong> file in the root where I configure Express, set up middleware, and then delegate routing to another file called <strong>routes.js</strong>. <strong>routes.js</strong> in turn defines my routes, their access levels, middleware, and in the end hands off the responsibility to a handler defined in one of my controllers.

client
// This is where I keep any client-side Javascript (So, all my Angular.js code), HTML, and CSS resources
- css
- js
- views
server
- controllers
- models
- routes.js
server.js
// entry point, instantiate server, middleware registration

Common user-roles/access-levels module
As you might remember from my first post, I made a module wherein I declared all user roles and access levels. I used a little trick to make this module usable both in the browser and by Node.js, so in case you forgot here's what the code looks like:

<pre>
[javascript]

[/javascript]
</pre>

EnsureAuthorized middleware
The next step is to create a middleware component which can be used to authorize an HTTP request based on the

Routing setup
 So, usually I'll have a routes.js file where I declare all]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date>2013-06-23 21:05:09</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="angular-js-2"><![CDATA[Angular.js]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="express"><![CDATA[Express]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="post_tag" nicename="passport-js"><![CDATA[Passport.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Angular.js and Web Components</title>
		<link>http://www.frederiknakstad.com/?p=363</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=363</guid>
		<description></description>
		<content:encoded><![CDATA[Being a big supporter of Google's Angular.js framework, sometimes it's hard to let loose of the idea that it's in some ways an intermediary solution until we have better browser API's.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date>2013-05-26 18:28:55</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.frederiknakstad.com/?p=365</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=365</guid>
		<description></description>
		<content:encoded><![CDATA[It's been a long time since I did a non-development post, so I thought I'd change things up a little bit.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date>2013-05-27 21:39:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>project_layout</title>
		<link>http://www.frederiknakstad.com/?attachment_id=404</link>
		<pubDate>Thu, 20 Jun 2013 15:49:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date>2013-06-20 15:49:07</wp:post_date>
		<wp:post_date_gmt>2013-06-20 15:49:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>project_layout</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>360</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/project_layout.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:381;s:6:"height";i:404;s:4:"file";s:26:"2013/06/project_layout.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"project_layout-200x150.png";s:5:"width";i:200;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"project_layout-125x125.png";s:5:"width";i:125;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:4:"four";a:4:{s:4:"file";s:26:"project_layout-220x146.png";s:5:"width";i:220;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:3:"six";a:4:{s:4:"file";s:26:"project_layout-340x226.png";s:5:"width";i:340;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}s:5:"eight";a:4:{s:4:"file";s:26:"project_layout-381x300.png";s:5:"width";i:381;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Contact form 1</title>
		<link>http://www.frederiknakstad.com/?post_type=wpcf7_contact_form&#038;p=82</link>
		<pubDate>Sun, 23 Dec 2012 17:59:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?post_type=wpcf7_contact_form&#038;p=82</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Your Name (required)<br />
    [text 1="your-name" language="*"][/text] </p>

<p>Your Email (required)<br />
    [email* your-email] </p>

<p>Subject<br />
    [text language="your-subject"][/text] </p>

<p>Your Message<br />
    [textarea your-message] </p>

<p>[submit "Send"]</p>
[your-subject]
[your-name] <[your-email]>
From: [your-name] <[your-email]>
Subject: [your-subject]

Message Body:
[your-message]

--
This mail is sent via contact form on A Modest Proposal http://www.frederiknakstad.com
nakstad@gmail.com


0

[your-subject]
[your-name] <[your-email]>
Message body:
[your-message]

--
This mail is sent via contact form on A Modest Proposal http://www.frederiknakstad.com
[your-email]


0
Your message was sent successfully. Thanks.
Failed to send your message. Please try later or contact the administrator by another method.
Validation errors occurred. Please confirm the fields and submit it again.
Failed to send your message. Please try later or contact the administrator by another method.
Please accept the terms to proceed.
Email address seems invalid.
Please fill the required field.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2012-12-23 17:59:24</wp:post_date>
		<wp:post_date_gmt>2012-12-23 17:59:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contact-form-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>wpcf7_contact_form</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_form</wp:meta_key>
			<wp:meta_value><![CDATA[<p>Your Name (required)<br />
    [text* your-name] </p>

<p>Your Email (required)<br />
    [email* your-email] </p>

<p>Subject<br />
    [text your-subject] </p>

<p>Your Message<br />
    [textarea your-message] </p>

<p>[submit "Send"]</p>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_mail</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:177:"From: [your-name] <[your-email]>
Subject: [your-subject]

Message Body:
[your-message]

--
This mail is sent via contact form on A Modest Proposal http://www.frederiknakstad.com";s:9:"recipient";s:17:"nakstad@gmail.com";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_mail_2</wp:meta_key>
			<wp:meta_value><![CDATA[a:8:{s:6:"active";b:0;s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:119:"Message body:
[your-message]

--
This mail is sent via contact form on A Modest Proposal http://www.frederiknakstad.com";s:9:"recipient";s:12:"[your-email]";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:12:"mail_sent_ok";s:43:"Your message was sent successfully. Thanks.";s:12:"mail_sent_ng";s:93:"Failed to send your message. Please try later or contact the administrator by another method.";s:16:"validation_error";s:74:"Validation errors occurred. Please confirm the fields and submit it again.";s:4:"spam";s:93:"Failed to send your message. Please try later or contact the administrator by another method.";s:12:"accept_terms";s:35:"Please accept the terms to proceed.";s:13:"invalid_email";s:28:"Email address seems invalid.";s:16:"invalid_required";s:31:"Please fill the required field.";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_additional_settings</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Awkward Change Flow or: How I Learned to Stop Worrying and Love the Application Cache</title>
		<link>http://www.frederiknakstad.com/awkward-change-flow-or-how-i-learned-to-stop-worrying-and-love-the-application-cache/</link>
		<pubDate>Mon, 20 May 2013 18:53:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=177</guid>
		<description></description>
		<content:encoded><![CDATA[Snappy title, yes...? Let's just move on...

The application cache API introduced by HTML5 is a very powerful tool which is particularly useful for web applications whose intended primary use is on mobile devices. Not only can it significantly speed up the load time of your app, but if implemented correctly you can make your application work quite well even when the user is not connected to the Internet. I'm not going to write too much about how the application cache works as it has already been covered very well elsewhere. If that's what you're looking for I'd recommend the following articles:
<ul>
	<li><a href="https://developer.mozilla.org/en-US/docs/HTML/Using_the_application_cache">Mozilla Developer Network - Using the application cache</a></li>
	<li><a href="http://www.html5rocks.com/en/tutorials/appcache/beginner">HTML5 Rocks - A Beginner's Guide to Using the Application Cache</a></li>
	<li><a href="http://diveintohtml5.info/offline.html">Dive Into HTML5 - Let's Take This Offline</a></li>
	<li><a href="http://www.w3.org/TR/offline-webapps/">W3C's Offical Specification - Offline Web Applications</a></li>
</ul>
These articles describe the API really well, and also notes several of the "gotchas" that might trip you up if you're not aware of them. If not taken into serious consideration these gotchas can make further development of your application turn into a painful and frustrating experience. So, I wanted to document a way of easing the pain.
<h4>Automatically updating the cache manifest file when files change</h4>
One of the more annoying quirks of developing with the application cache is that it has no mechanism for detecting updates to already cached resources. It doesn't re-cache any of the files in the manifest till the contents of the manifest itself has changed. The way most people get around this is by adding a comment to the top or bottom of the manifest with a timestamp or revision number. However, constantly updating this comment every time you want the browser to recache your resource will get tedious really quick.

So, we need a way of automatically updating this comment in the manifest whenever a change has been detected in one of our cached files! To do this I prefer to use <a href="http://gruntjs.com/">Grunt</a>, which is a tool used to run automated tasks. It has a bunch of useful plugins, and for our purposes we need the <a href="https://github.com/gunta/grunt-manifest">grunt-manifest</a> and <a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a> packages. <strong>grunt-manifest</strong> enables you to define your cache manifest configuration in your Gruntfile as a JSON object and regenerate on demand, while <strong>grunt-contrib-watch</strong> will run any task you specify when any of the files it's watching is updated... You can probably see where this is going...

To install all the necessary packages, just run the following commands in your project folder (assuming you already have installed npm):

<code>npm install -g grunt-cli</code>
<code>npm install --save-dev grunt</code>
<code>npm install --save-dev grunt-manifest</code>
<code>npm install --save-dev grunt-contrib-watch</code>

Next, create a <code>Gruntfile.js</code> in your project root, which is where we will define our automated tasks:

<pre>
[javascript]
module.exports = function(grunt) {

    // Load plugins
    grunt.loadNpmTasks('grunt-manifest');
    grunt.loadNpmTasks('grunt-contrib-watch');

    // Make a list of paths/files to cache
    var cache = ['./public/js/*', './public/img/*', './public/css/*'];

    grunt.initConfig({

        // Define how your manifest file should be constructed
        manifest: {
            generate: {
                options: {
                    network: ['http://*', 'https://*'],
                    timestamp: true
                },
                src: cache,
                dest: 'manifest.appcache'
            }
        },

        // Now setup the watch task to monitor the same files
        // that are referenced in the CACHE section of your
        // manifest, and fire the &quot;manifest&quot; task whenever
        // a change is detected
        watch: {
            scripts: {
                files: cache,
                tasks: ['manifest']
            }
        }
    });

};
[/javascript]
</pre>

Here we define two tasks, <code>manifest</code> and <code>watch</code>. The <code>manifest</code> task will generate a new manifest file and update the timestamp in the comment at the top of the file. The <code>watch</code> task will monitor the files specified, and is configured to perform the manifest task when a change has been detected. So, now we can have the manifest be automatically generated whenever a file changes by running the command <code>grunt watch</code>. This task can yet again be made part of a separate <code>run-dev</code> task which could also fire up a local node-server, live-reload, automatic LESS compilation, etc. to remove any other tasks you do manually when starting up a development server.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date>2013-05-20 18:53:04</wp:post_date>
		<wp:post_date_gmt>2013-05-20 18:53:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>awkward-change-flow-or-how-i-learned-to-stop-worrying-and-love-the-application-cache</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="application-cache"><![CDATA[Application Cache]]></category>
		<category domain="category" nicename="application-cache"><![CDATA[Application Cache]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="grunt-js"><![CDATA[Grunt.js]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[HTML5]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Psych Saturday</title>
		<link>http://www.frederiknakstad.com/psych-saturday/</link>
		<pubDate>Sat, 26 Jan 2013 12:18:21 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[I've always been a huge fan of psychedelic and acid rock from the 60's, so I'm really happy to see the resurgence of this type of music in more recent times. Some of the best albums to come out the past few years have come from bands like Deerhunter and Animal Collective who borrow heavily from the likes of Revolver-era Beatles and psych classic <a href="http://www.allmusic.com/album/the-united-states-of-america-mw0000207966">The United States of America</a>. The genre hasn't really changed that much with the new crop of bands popping up... They're basically doing the same thing they did in the 60's, but that still means there's a much greater willingness to experiment with structure and sound than you see elsewhere.

<span style="font-size: 14px;">One band I've taken a great liking to is Tame Impala from Perth, Australia. I remember being hooked as soon as I heard the opening track to </span><a style="font-size: 14px; line-height: 21px;" href="http://www.allmusic.com/album/innerspeaker-mw0001990920">Innerspeaker</a><span style="font-size: 14px;"> called It Is Not Meant To Be. The part that really stands out to me, and makes the song shine, is how the aural texture (for lack of a better term...) of the song shifts so perfectly to match the lyrics. The instrumentation is pretty standard, but it seems very thought out how the different instruments interact and carry each other through the different parts of the song. To me it's a perfect psych pearl, and my favorite Tame Impala song.</span>

[embed]http://youtu.be/bUq3oc0lYbw[/embed]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2013-01-26 12:18:21</wp:post_date>
		<wp:post_date_gmt>2013-01-26 12:18:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>psych-saturday</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="music"><![CDATA[Music]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2badaf145ecfec3f4f8d22630f56a7b0</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="500" height="375" src="http://www.youtube.com/embed/bUq3oc0lYbw?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Seeding mongodb through your mongoose models</title>
		<link>http://www.frederiknakstad.com/seeding-mongodb-through-your-mongoose-models/</link>
		<pubDate>Fri, 12 Apr 2013 20:58:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=193</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>23/4/2013 Update:</strong>
<em>A change implementing promise support for the </em><code>create</code><em> function <a href="https://github.com/LearnBoost/mongoose/commit/2ef5f237e054fc4846143530410e353ef7a7456e">was just committed to GitHub</a>, and should be available in the 3.7 release of Mongoose. Sweet!</em>

Just wanted to share a nice little technique I discovered when working on a project using the wonderful <a href="http://mongoosejs.com/">Mongoose</a> library to interact with a MongoDB database in Node.js. I was writing some integration tests, and needed to reset and seed the database from a set of JSON files before running each test. I really wanted to do this through my existing Mongoose models, so that I could get all the seed data validated before running my tests. Since there also are relations between my different collections I needed to insert the collections in a certain order, so my first attempt quickly devolved into a textbook example of the good ol' pyramid of doom:

<pre>
[javascript]
User.remove({}, function(err) {
    if(err) { return done(err); }

    Exercise.remove({}, function(err) {
        if(err) { return done(err); }

        WorkoutTemplate.remove({}, function(err) {
            if(err) { return done(err); }

            User.create(require('../../data/users.json'), function(err) {
                if(err) { return done(err); }

                Exercise.create(require('../../data/exercises.json'), function(err) {
                    if(err) { return done(err); }

                    WorkoutTemplate.create(require('../../data/workoutTemplates.json'), function(err) {
                        if(err) { return done(err); }
                        else    { return done(); }
                    });
                });
            });
        });
    });
});
[/javascript]
</pre>

In the above code snippet <strong>User</strong>, <strong>Exercise</strong>, and <strong>WorkoutTemplate </strong>are my mongoose models, and since my <strong>WorkoutTemplate </strong>schema references my <strong>Exercise </strong>schema I need to insert data in that specific order. Using Mongoose's <code>remove</code> function with an empty object as the first argument will clear everything from the related collection. Furthermore, the <code>create</code> function will attempt to do a batch insert of the array you hand it. However, as you can see this quickly devolved into callback hell, and that was with just three different collections! Fortunately, I discovered that the <code>exec</code> function, which you can call on query objects, returns a promise object. This means I can just make a pretty, little promise chain instead of using callbacks.

There is just one obstacle to this... The <code>create</code> function does not return a query object, meaning we can't call <code>exec</code> on it to return a promise... I decided to rectify this by attaching a new function on the base mongoose Model which basically just wraps the <code>create</code> function, but actually returns a promise object.

<pre>
[javascript]
var mongoose = require('mongoose');
mongoose.Model.seed = function(entities) {
	var promise = new mongoose.Promise;
	this.create(entities, function(err) {
		if(err) { promise.reject(err); }
		else    { promise.resolve(); }
	});
	return promise;
};
[/javascript]
</pre>

So, finally I am able to create a nice and neat promise chain in the <code>beforeEach</code> function of my test suite. Voilà!

<pre>
[javascript]
beforeEach(function(done) {
	
	...

	// Reset collections
	User.remove().exec()
		.then(function() { Exercise.remove().exec() })
		.then(function() { WorkoutTemplate.remove().exec() })

		// Seed
		.then(function() { User.seed(require('../scaffolds/users.json')) })
		.then(function() { Exercise.seed(require('../scaffolds/exercises.json')); })
		.then(function() { WorkoutTemplate.seed(require('../scaffolds/workoutTemplates.json')); })
                
		// Finito!
		.then(function() { done(); }, function(err) { return done(err); });

	...
	
});
[/javascript]
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date>2013-04-12 20:58:15</wp:post_date>
		<wp:post_date_gmt>2013-04-12 20:58:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>seeding-mongodb-through-your-mongoose-models</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="post_tag" nicename="mongoose"><![CDATA[Mongoose]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[Node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[aaron]]></wp:comment_author>
			<wp:comment_author_email>aaron.heckmann+github@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>https://github.com/aheckmann</wp:comment_author_url>
			<wp:comment_author_IP>216.55.28.194</wp:comment_author_IP>
			<wp:comment_date>2013-04-22 21:15:21</wp:comment_date>
			<wp:comment_date_gmt>2013-04-22 21:15:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good idea. mongoose 3.7 will return a promise from Model.create https://github.com/LearnBoost/mongoose/commit/2ef5f237e054fc4846143530410e353ef7a7456e]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366665321.6666989;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366699553.267436;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>nakstad@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.18.232.2</wp:comment_author_IP>
			<wp:comment_date>2013-04-23 06:52:39</wp:comment_date>
			<wp:comment_date_gmt>2013-04-23 06:52:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome! Thanks for adding this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>34</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366699959.9944749;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Application Cache Update Process State Diagram</title>
		<link>http://www.frederiknakstad.com/application-cache-update-process-state-diagram/</link>
		<pubDate>Fri, 24 May 2013 21:33:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[Here's a quick little follow-up to my last post about the Application Cache. How the browser checks and fetches the cache can be a little confusing at first, so I made a state diagram to keep track of the different states the Application Cache might be in and the events that change said state.
<a href="http://www.frederiknakstad.com/wp-content/uploads/2013/05/ps_neutral.png"><img class="alignnone size-full wp-image-290" alt="ps_neutral" src="http://www.frederiknakstad.com/wp-content/uploads/2013/05/ps_neutral.png" width="16" height="16" /></a> <a href="http://www.frederiknakstad.com/wp-content/uploads/2013/05/appCache_stateDiag.png"><img class="alignnone size-medium wp-image-313" alt="appCache_stateDiag" src="http://www.frederiknakstad.com/wp-content/uploads/2013/05/appCache_stateDiag-495x444.png" width="495" height="444" /></a>
Well, it's not awfully complicated, but it's nice to have a visual aid when debugging. The guard conditions indicate whether there already exists an old version of the application cache or not.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2013-05-24 21:33:34</wp:post_date>
		<wp:post_date_gmt>2013-05-24 21:33:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>application-cache-update-process-state-diagram</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="application-cache"><![CDATA[Application Cache]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.frederiknakstad.com/social_link/419/</link>
		<pubDate>Sun, 07 Jul 2013 16:22:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?post_type=social_link&#038;p=419</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2013-07-07 16:22:18</wp:post_date>
		<wp:post_date_gmt>2013-07-07 16:22:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>419</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>social_link</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>social_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.linkedin.com/in/frederiknakstad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>social_link_icon</wp:meta_key>
			<wp:meta_value><![CDATA[picons41.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.frederiknakstad.com/social_link/420/</link>
		<pubDate>Sun, 07 Jul 2013 16:24:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.frederiknakstad.com/?post_type=social_link&#038;p=420</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date>2013-07-07 16:24:18</wp:post_date>
		<wp:post_date_gmt>2013-07-07 16:24:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>420</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>social_link</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>social_link_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://twitter.com/fnakstad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>social_link_icon</wp:meta_key>
			<wp:meta_value><![CDATA[picons03.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
