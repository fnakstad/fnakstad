<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | A Modest Proposal]]></title>
  <link href="http://frederiknakstad.com/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://frederiknakstad.com/"/>
  <updated>2013-08-26T15:52:25+02:00</updated>
  <id>http://frederiknakstad.com/</id>
  <author>
    <name><![CDATA[Frederik Nakstad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authentication in Single Page Applications with Angular.js Part 2]]></title>
    <link href="http://frederiknakstad.com/blog/2013/08/04/authentication-in-single-page-applications-with-angular.js-part-2/"/>
    <updated>2013-08-04T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/blog/2013/08/04/authentication-in-single-page-applications-with-angular.js-part-2</id>
    <content type="html"><![CDATA[<p>As you may have gathered from the title, this is a follow-up to <a href="http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/">a post I wrote a some time ago</a> regarding role-based authentication/authorization in single page applications. This time I&rsquo;d like to highlight how I implemented routing and authorization in the Node.js server that complements my Angular client.</p>

<p><strong>Since you can never trust that the client code hasn’t been tampered with by the user, it’s paramount to have a good authentication/authorization strategy on the server. The client-side auth scheme I introduced earlier is simply a convenient way to customize the user interface – proper authentication/authorization should always be left up to the server-side.</strong></p>

<p>I am using Node.js/Express along with the excellent Passport.js authentication middleware, but hopefully it shouldn&rsquo;t be too much bother to apply the same patterns to other server-side frameworks. You can see an example of this scheme implemented in <a href="https://github.com/fnakstad/angular-client-side-auth">this GitHub repo</a>, and I have a live version of it <a href="http://angular-client-side-auth.herokuapp.com/">running on Heroku</a>.</p>

<p>Well, let&rsquo;s get right to it!</p>

<h2>Project layout</h2>

<p>Node.js/Express is very non-prescriptive in terms of dictating how to lay out your code, so I’ll try to give a quick overview how I structure my projects first. When working with Node.js/Angular I usually divide my code into server and client directories, and then split my server side code into controllers and models. So my directory structure will look something like this:</p>

<p><img src="/images/posts/2013-08-04-authentication-in-single-page-applications-with-angular.js-part-2/project_layout.png"></p>

<p>The <strong>client</strong> directory contains all my client-side Javascript (including all my Angular.js code), HTML, and CSS resources. This is because I want a clear division between the resources that will be running in the browser and those that will be run server-side. The client folder is served as a static directory structure by Node.js. My <strong>server</strong> directory contains the code for defining my REST API. So, when the client has been downloaded in the user’s browser it will communicate with the server by sending XHRs to fetch data, login/logout users, fetch partial views, and so on. The starting point is the <strong>server.js</strong> file in the root directory where I bootstrap the server application by configuring Express and Passport and setting up other middleware components.</p>

<h2>Routing</h2>

<p>Before I actually start up the server in <strong>server.js</strong> I will register my own routes by calling the module defined in <strong>routes.js</strong>. Let’s take a closer look at it.</p>

<p><div><script src='https://gist.github.com/6116325.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Since I want to set up my server-side routes somewhat similarly to how I did on the client-side, I create an array called routes which contains objects defining each route. This gives me the freedom to customize what kind of metadata I want to associate with each route. These are the properties I expect in a route object:</p>

<table>
<thead>
<tr>
<th>Property    </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>path</strong>        </td>
<td> The url you want the route to map to</td>
</tr>
<tr>
<td><strong>httpMethod</strong>  </td>
<td> HTTP Method, GET, POST, PUT, or DELETE</td>
</tr>
<tr>
<td><strong>middleware</strong>  </td>
<td> An array of functions which will be executed in the order left to right</td>
</tr>
<tr>
<td><strong>accessLevel</strong> </td>
<td> The access level of the route. If the user requesting the route doesn’t have access a 403 Unauthorized will be returned. If this property is not present, an access level of public is assumed.</td>
</tr>
</tbody>
</table>


<br />


<h2>Authorization</h2>

<p>One of the more interesting properties here is the <code>accessLevel</code> property, which is used to restrict access to the route for certain user roles. This property is not required unless you want to restrict access to a route for a certain set of users. As you might remember from <a href="http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/">my previous post</a>, I made a module wherein I declared all user roles and access levels. I used a little trick to make this module usable both in the browser and by Node.js. This ensures that the values used to define access levels and user roles are equal on the server- and client-side. Of course the end-user can tamper with the values in his browser, but that won’t affect what’s running server-side. This is why I have been stressing the point that you need to make sure your server-side resources are properly secured. In case you forgot, here’s what the code looks like:</p>

<p><div><script src='https://gist.github.com/6031923.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>To enforce the access levels I’ve set on my routes I made a middleware component. This middleware component will calculate whether the current user has access to the requested route using a bitwise OR operation on the access level of the route and role of the requesting user. If the user is found to not have access the sever will respond with a HTTP 403, and break out of the middleware chain. You might also notice that I fall back on the respective <code>public</code> values for access levels and user roles by default if no user is logged in or if the route does not contain the accessLevel property.</p>

<p><div><script src='https://gist.github.com/6165691.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So, now I need to register my routes with express and make sure that the <code>ensureAuthorized</code> middleware is run on all of them. I usually perform this logic in the function I export from the <strong>routes.js</strong> file, so that I can easily call it, and thus register my routes, from my <strong>server.js</strong> file. The function loops over the <code>routes</code> array, prepending each route’s middleware arrays with the <code>ensureAuthorized</code> component, and then registering it with express according to the other route metadata.</p>

<p><div><script src='https://gist.github.com/6150416.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>And that’s it! I want to remind that you can see a more comprehensive example in <a href="https://github.com/fnakstad/angular-client-side-auth">this Github repo</a>. If you want a better understanding of how this approach works, I highly recommend that you clone and mess around with it a little bit. And if you have any questions or issues, just post a comment here or an issue on Github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seeding mongodb through your mongoose models]]></title>
    <link href="http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models/"/>
    <updated>2013-04-12T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models</id>
    <content type="html"><![CDATA[<p><strong>23/4/2013 Update:</strong>
<em>A change implementing promise support for the</em> <code>create</code> <em>function <a href="https://github.com/LearnBoost/mongoose/commit/2ef5f237e054fc4846143530410e353ef7a7456e">was just committed to GitHub</a>, and should be available in the 3.7 release of Mongoose. Sweet!</em></p>

<p>Just wanted to share a nice little technique I discovered when working on a project using the wonderful <a href="http://mongoosejs.com/">Mongoose</a> library to interact with a MongoDB database in Node.js. I was writing some integration tests, and needed to reset and seed the database from a set of JSON files before running each test. I really wanted to do this through my existing Mongoose models, so that I could get all the seed data validated before running my tests. Since there also are relations between my different collections I needed to insert the collections in a certain order, so my first attempt quickly devolved into a textbook example of the good ol' pyramid of doom:</p>

<p><div><script src='https://gist.github.com/6033297.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>In the above code snippet <code>User</code>, <code>Exercise</code>, and <code>WorkoutTemplate</code> are my mongoose models, and since my <code>WorkoutTemplate</code> schema references my <code>Exercise</code> schema I need to insert data in that specific order. Using Mongoose&rsquo;s <code>remove</code> function with an empty object as the first argument will clear everything from the related collection. Furthermore, the <code>create</code> function will attempt to do a batch insert of the array you hand it. However, as you can see this quickly devolved into callback hell, and that was with just three different collections! Fortunately, I discovered that the <code>exec</code> function, which you can call on query objects, returns a promise object. This means I can just make a pretty, little promise chain instead of using callbacks.</p>

<p>There is just one obstacle to this&hellip; The <code>create</code> function does not return a query object, meaning we can&rsquo;t call <code>exec</code> on it to return a promise&hellip; I decided to rectify this by attaching a new function on the base mongoose Model which basically just wraps the <code>create</code> function, but actually returns a promise object.</p>

<p><div><script src='https://gist.github.com/6033333.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So, finally I am able to create a nice and neat promise chain in the <code>beforeEach</code> function of my test suite. Voilà!</p>

<p><div><script src='https://gist.github.com/6033342.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
