<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | A Modest Proposal]]></title>
  <link href="http://frederiknakstad.com/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://frederiknakstad.com/"/>
  <updated>2013-07-30T21:33:00+02:00</updated>
  <id>http://frederiknakstad.com/</id>
  <author>
    <name><![CDATA[Frederik Nakstad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authentication in Single Page Applications with Angular.js Part 2]]></title>
    <link href="http://frederiknakstad.com/blog/2013/08/04/authentication-in-single-page-applications-with-angular.js-part-2/"/>
    <updated>2013-08-04T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/blog/2013/08/04/authentication-in-single-page-applications-with-angular.js-part-2</id>
    <content type="html"><![CDATA[<p>As you may have gathered from the title, this is a follow-up to <a href="http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/">a post I wrote a some time ago</a> regarding role-based authentication/authorization in single page applications. This time I&rsquo;d like to highlight how I implemented the server-side code that complements my client-side solution.</p>

<p><strong>Since you can never trust that the requests you get from the client haven&rsquo;t been tampered with, it&rsquo;s paramount to have a good authentication/authorization strategy on the server. The client-side authentication scheme I introduced earlier is simply a convenient way to adapt the user interface &ndash; proper authentication/authorization should always be left up to the server-side.</strong></p>

<p>I am using Node.js/Express along with the excellent Passport.js authentication middleware, but hopefully it shouldn&rsquo;t be too much bother to apply the same patterns to other server-side frameworks. You can see an example of this scheme implemented in <a href="https://github.com/fnakstad/angular-client-side-auth">this GitHub repo</a>, and I have a live version of it <a href="http://angular-client-side-auth.herokuapp.com/">running on Heroku</a>. Well, let&rsquo;s get right to it!</p>

<p>Node.js/Express is very non-prescriptive in terms of telling you how to lay out your code, so I&rsquo;ll try to give a quick overview how I lay out my projects first. When working with Node.js/Angular I usually divide my code into server and client directories, and then split my server side code into controllers and models. so my directory structure usually looks something like this:</p>

<p><a href="http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png"><img src="http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png" alt="project_layout" width="381" height="404" class="aligncenter size-full wp-image-404" /></a></p>

<p>So, the <strong>client</strong> directory contains all my client-side Javascript (including all my Angular.js code), HTML, and CSS resources. The client folder is served as a static directory structure. My <strong>server</strong> directory contains the code for defining my REST API.</p>

<p>The entry point is the <strong>server.js</strong> file in the root where I configure Express, set up middleware, and then delegate routing to another file called <strong>routes.js</strong>. <strong>routes.js</strong> in turn defines my routes, their access levels, middleware, and in the end hands off the responsibility to a handler defined in one of my controllers.</p>

<ul>
<li>client               * This is where I keep any client-side Javascript (So, all my Angular.js code), HTML, and CSS resources *

<ul>
<li>css</li>
<li>js</li>
<li>views</li>
</ul>
</li>
<li>server

<ul>
<li>controllers</li>
<li>models</li>
<li>routes.js</li>
</ul>
</li>
<li>server.js</li>
</ul>


<p>client
// This is where I keep any client-side Javascript (So, all my Angular.js code), HTML, and CSS resources
&ndash; css
&ndash; js
&ndash; views
server
&ndash; controllers
&ndash; models
&ndash; routes.js
server.js
// entry point, instantiate server, middleware registration</p>

<p>Common user-roles/access-levels module
As you might remember from my first post, I made a module wherein I declared all user roles and access levels. I used a little trick to make this module usable both in the browser and by Node.js, so in case you forgot here&rsquo;s what the code looks like:</p>

<pre>
[javascript]

[/javascript]
</pre>


<p>EnsureAuthorized middleware
The next step is to create a middleware component which can be used to authorize an HTTP request based on the</p>

<p>Routing setup
 So, usually I&rsquo;ll have a routes.js file where I declare all</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seeding mongodb through your mongoose models]]></title>
    <link href="http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models/"/>
    <updated>2013-04-12T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models</id>
    <content type="html"><![CDATA[<p><strong>23/4/2013 Update:</strong>
<em>A change implementing promise support for the</em> <code>create</code> <em>function <a href="https://github.com/LearnBoost/mongoose/commit/2ef5f237e054fc4846143530410e353ef7a7456e">was just committed to GitHub</a>, and should be available in the 3.7 release of Mongoose. Sweet!</em></p>

<p>Just wanted to share a nice little technique I discovered when working on a project using the wonderful <a href="http://mongoosejs.com/">Mongoose</a> library to interact with a MongoDB database in Node.js. I was writing some integration tests, and needed to reset and seed the database from a set of JSON files before running each test. I really wanted to do this through my existing Mongoose models, so that I could get all the seed data validated before running my tests. Since there also are relations between my different collections I needed to insert the collections in a certain order, so my first attempt quickly devolved into a textbook example of the good ol' pyramid of doom:</p>

<p><div><script src='https://gist.github.com/6033297.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>In the above code snippet <code>User</code>, <code>Exercise</code>, and <code>WorkoutTemplate</code> are my mongoose models, and since my <code>WorkoutTemplate</code> schema references my <code>Exercise</code> schema I need to insert data in that specific order. Using Mongoose&rsquo;s <code>remove</code> function with an empty object as the first argument will clear everything from the related collection. Furthermore, the <code>create</code> function will attempt to do a batch insert of the array you hand it. However, as you can see this quickly devolved into callback hell, and that was with just three different collections! Fortunately, I discovered that the <code>exec</code> function, which you can call on query objects, returns a promise object. This means I can just make a pretty, little promise chain instead of using callbacks.</p>

<p>There is just one obstacle to this&hellip; The <code>create</code> function does not return a query object, meaning we can&rsquo;t call <code>exec</code> on it to return a promise&hellip; I decided to rectify this by attaching a new function on the base mongoose Model which basically just wraps the <code>create</code> function, but actually returns a promise object.</p>

<p><div><script src='https://gist.github.com/6033333.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So, finally I am able to create a nice and neat promise chain in the <code>beforeEach</code> function of my test suite. Voil√†!</p>

<p><div><script src='https://gist.github.com/6033342.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
