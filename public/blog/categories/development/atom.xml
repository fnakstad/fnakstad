<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | A Modest Proposal]]></title>
  <link href="http://frederiknakstad.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://frederiknakstad.com/"/>
  <updated>2013-07-30T21:33:00+02:00</updated>
  <id>http://frederiknakstad.com/</id>
  <author>
    <name><![CDATA[Frederik Nakstad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authentication in Single Page Applications with Angular.js Part 2]]></title>
    <link href="http://frederiknakstad.com/blog/2013/08/04/authentication-in-single-page-applications-with-angular.js-part-2/"/>
    <updated>2013-08-04T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/blog/2013/08/04/authentication-in-single-page-applications-with-angular.js-part-2</id>
    <content type="html"><![CDATA[<p>As you may have gathered from the title, this is a follow-up to <a href="http://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/">a post I wrote a some time ago</a> regarding role-based authentication/authorization in single page applications. This time I&rsquo;d like to highlight how I implemented the server-side code that complements my client-side solution.</p>

<p><strong>Since you can never trust that the requests you get from the client haven&rsquo;t been tampered with, it&rsquo;s paramount to have a good authentication/authorization strategy on the server. The client-side authentication scheme I introduced earlier is simply a convenient way to adapt the user interface &ndash; proper authentication/authorization should always be left up to the server-side.</strong></p>

<p>I am using Node.js/Express along with the excellent Passport.js authentication middleware, but hopefully it shouldn&rsquo;t be too much bother to apply the same patterns to other server-side frameworks. You can see an example of this scheme implemented in <a href="https://github.com/fnakstad/angular-client-side-auth">this GitHub repo</a>, and I have a live version of it <a href="http://angular-client-side-auth.herokuapp.com/">running on Heroku</a>. Well, let&rsquo;s get right to it!</p>

<p>Node.js/Express is very non-prescriptive in terms of telling you how to lay out your code, so I&rsquo;ll try to give a quick overview how I lay out my projects first. When working with Node.js/Angular I usually divide my code into server and client directories, and then split my server side code into controllers and models. so my directory structure usually looks something like this:</p>

<p><a href="http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png"><img src="http://www.frederiknakstad.com/wp-content/uploads/2013/06/project_layout.png" alt="project_layout" width="381" height="404" class="aligncenter size-full wp-image-404" /></a></p>

<p>So, the <strong>client</strong> directory contains all my client-side Javascript (including all my Angular.js code), HTML, and CSS resources. The client folder is served as a static directory structure. My <strong>server</strong> directory contains the code for defining my REST API.</p>

<p>The entry point is the <strong>server.js</strong> file in the root where I configure Express, set up middleware, and then delegate routing to another file called <strong>routes.js</strong>. <strong>routes.js</strong> in turn defines my routes, their access levels, middleware, and in the end hands off the responsibility to a handler defined in one of my controllers.</p>

<ul>
<li>client               * This is where I keep any client-side Javascript (So, all my Angular.js code), HTML, and CSS resources *

<ul>
<li>css</li>
<li>js</li>
<li>views</li>
</ul>
</li>
<li>server

<ul>
<li>controllers</li>
<li>models</li>
<li>routes.js</li>
</ul>
</li>
<li>server.js</li>
</ul>


<p>client
// This is where I keep any client-side Javascript (So, all my Angular.js code), HTML, and CSS resources
&ndash; css
&ndash; js
&ndash; views
server
&ndash; controllers
&ndash; models
&ndash; routes.js
server.js
// entry point, instantiate server, middleware registration</p>

<p>Common user-roles/access-levels module
As you might remember from my first post, I made a module wherein I declared all user roles and access levels. I used a little trick to make this module usable both in the browser and by Node.js, so in case you forgot here&rsquo;s what the code looks like:</p>

<pre>
[javascript]

[/javascript]
</pre>


<p>EnsureAuthorized middleware
The next step is to create a middleware component which can be used to authorize an HTTP request based on the</p>

<p>Routing setup
 So, usually I&rsquo;ll have a routes.js file where I declare all</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Application Cache Update Process State Diagram]]></title>
    <link href="http://frederiknakstad.com/application-cache-update-process-state-diagram/"/>
    <updated>2013-05-24T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/application-cache-update-process-state-diagram</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quick  little follow-up to my last post about the Application Cache. How the browser checks and fetches the cache can be a little confusing at first, so I made a state diagram to keep track of the different states the Application Cache might be in and the events that change said state.</p>

<p><img src="/images/posts/appCache_stateDiag.png"></p>

<p>Well, it&rsquo;s not awfully complicated, but it&rsquo;s nice to have a visual aid when debugging. The guard conditions indicate whether there already exists an old version of the application cache or not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awkward Change Flow or: How I Learned to Stop Worrying and Love the Application Cache]]></title>
    <link href="http://frederiknakstad.com/awkward-change-flow-or-how-i-learned-to-stop-worrying-and-love-the-application-cache/"/>
    <updated>2013-05-20T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/awkward-change-flow-or-how-i-learned-to-stop-worrying-and-love-the-application-cache</id>
    <content type="html"><![CDATA[<p>Snappy title, yes&hellip;? Let&rsquo;s just move on&hellip;</p>

<p>The application cache API introduced by HTML5 is a very powerful tool which is particularly useful for web applications whose intended primary use is on mobile devices. Not only can it significantly speed up the load time of your app, but if implemented correctly you can make your application work quite well even when the user is not connected to the Internet. I&rsquo;m not going to write too much about how the application cache works as it has already been covered very well elsewhere. If that&rsquo;s what you&rsquo;re looking for I&rsquo;d recommend the following articles:</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/HTML/Using_the_application_cache">Mozilla Developer Network &ndash; Using the application cache</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/appcache/beginner">HTML5 Rocks &ndash; A Beginner&rsquo;s Guide to Using the Application Cache</a></li>
<li><a href="http://diveintohtml5.info/offline.html">Dive Into HTML5 &ndash; Let&rsquo;s Take This Offline</a></li>
<li><a href="http://www.w3.org/TR/offline-webapps">W3C&rsquo;s Offical Specification &ndash; Offline Web Applications</a></li>
</ul>


<p>These articles describe the API really well, and also notes several of the &ldquo;gotchas&rdquo; that might trip you up if you&rsquo;re not aware of them. If not taken into serious consideration these gotchas can make further development of your application turn into a painful and frustrating experience. So, I wanted to document a way of easing the pain.</p>

<h2>Automatically updating the cache manifest file when files change</h2>

<p>One of the more annoying quirks of developing with the application cache is that it has no mechanism for detecting updates to already cached resources. It doesn&rsquo;t re-cache any of the files in the manifest till the contents of the manifest itself has changed. The way most people get around this is by adding a comment to the top or bottom of the manifest with a timestamp or revision number. However, constantly updating this comment every time you want the browser to recache your resource will get tedious really quick.</p>

<p>So, we need a way of automatically updating this comment in the manifest whenever a change has been detected in one of our cached files! To do this I prefer to use <a href="http://gruntjs.com">Grunt</a>, which is a tool used to run automated tasks. It has a bunch of useful plugins, and for our purposes we need the <a href="https://github.com/gunta/grunt-manifest">grunt-manifest</a> and <a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a> packages. <strong>grunt-manifest</strong> enables you to define your cache manifest configuration in your Gruntfile as a JSON object and regenerate on demand, while <strong>grunt-contrib-watch</strong> will run any task you specify when any of the files it&rsquo;s watching is updated&hellip; You can probably see where this is going&hellip;</p>

<p>To install all the necessary packages, just run the following commands in your project folder (assuming you already have installed npm):</p>

<p><code>
npm install -g grunt-cli
npm install grunt
npm install grunt-manifest
npm install grunt-contrib-watch
</code></p>

<p>Next, create a <code>Gruntfile.js</code> in your project root, which is where we will define our automated tasks:</p>

<p><div><script src='https://gist.github.com/6033441.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Here we define two tasks, <code>manifest</code> and <code>watch</code>. The <code>manifest</code> task will generate a new manifest file and update the timestamp in the comment at the top of the file. The <code>watch</code> task will monitor the files specified, and is configured to perform the manifest task when a change has been detected. So, now we can have the manifest be automatically generated whenever a file changes by running the command <code>grunt watch</code>. This task can yet again be made part of a separate <code>run-dev</code> task which could also fire up a local node-server, live-reload, automatic LESS compilation, etc. to remove any other tasks you do manually when starting up a development server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seeding mongodb through your mongoose models]]></title>
    <link href="http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models/"/>
    <updated>2013-04-12T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models</id>
    <content type="html"><![CDATA[<p><strong>23/4/2013 Update:</strong>
<em>A change implementing promise support for the</em> <code>create</code> <em>function <a href="https://github.com/LearnBoost/mongoose/commit/2ef5f237e054fc4846143530410e353ef7a7456e">was just committed to GitHub</a>, and should be available in the 3.7 release of Mongoose. Sweet!</em></p>

<p>Just wanted to share a nice little technique I discovered when working on a project using the wonderful <a href="http://mongoosejs.com/">Mongoose</a> library to interact with a MongoDB database in Node.js. I was writing some integration tests, and needed to reset and seed the database from a set of JSON files before running each test. I really wanted to do this through my existing Mongoose models, so that I could get all the seed data validated before running my tests. Since there also are relations between my different collections I needed to insert the collections in a certain order, so my first attempt quickly devolved into a textbook example of the good ol' pyramid of doom:</p>

<p><div><script src='https://gist.github.com/6033297.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>In the above code snippet <code>User</code>, <code>Exercise</code>, and <code>WorkoutTemplate</code> are my mongoose models, and since my <code>WorkoutTemplate</code> schema references my <code>Exercise</code> schema I need to insert data in that specific order. Using Mongoose&rsquo;s <code>remove</code> function with an empty object as the first argument will clear everything from the related collection. Furthermore, the <code>create</code> function will attempt to do a batch insert of the array you hand it. However, as you can see this quickly devolved into callback hell, and that was with just three different collections! Fortunately, I discovered that the <code>exec</code> function, which you can call on query objects, returns a promise object. This means I can just make a pretty, little promise chain instead of using callbacks.</p>

<p>There is just one obstacle to this&hellip; The <code>create</code> function does not return a query object, meaning we can&rsquo;t call <code>exec</code> on it to return a promise&hellip; I decided to rectify this by attaching a new function on the base mongoose Model which basically just wraps the <code>create</code> function, but actually returns a promise object.</p>

<p><div><script src='https://gist.github.com/6033333.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So, finally I am able to create a nice and neat promise chain in the <code>beforeEach</code> function of my test suite. Voilà!</p>

<p><div><script src='https://gist.github.com/6033342.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication in Single Page Applications with Angular.js]]></title>
    <link href="http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/"/>
    <updated>2013-01-21T00:00:00+01:00</updated>
    <id>http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js</id>
    <content type="html"><![CDATA[<p><strong>3/6/2013 update:</strong>
<em>I&rsquo;ve done some heavy refactoring, and have now introduced an angular service to eliminate a lot of redundant code, as well as a directive which can aid in optionally displaying/hiding elements based on an access level. Please check out the <a href="https://github.com/fnakstad/angular-client-side-auth">GitHub repo</a> for the latest version. The example app in the repo has been deployed to Heroku, so now you can test it out live for yourself <a href="http://angular-client-side-auth.herokuapp.com/">right here</a>.</em></p>

<p>I have been working a lot with Angular.js lately, and love how easy it makes it to create web applications with rich client-side functionality. It&rsquo;s an extremely useful asset in keeping your own client-side code lean, making it easy to separate business logic and declarative markup for anything view specific.  However, it&rsquo;s not all roses, and I&rsquo;m still struggling to find the best solutions to some problems I have encountered. One of which is a problem that exceeds the scope of Angular&hellip;</p>

<p><strong><em>How do I deal with authentication and authorization in single page applications?</em></strong></p>

<p>Since only the initial load of the app is a full page load, and subsequent communication with the server is entirely done via XHRs I need a slightly different model from the traditional one. One option I tried out was to have a traditional login page which, on success, redirects to a secured URL which loads the actual application. This has the added benefit that the client side code and view templates used for pages intended for logged in users are not accessible to anyone not logged in. However, in many cases this is not much of a concern as long as the communication against the resource API is properly secured. Preventing anyone from getting or modifying sensitive data is a server-side issue, and should therefore be properly handled there. I wanted a seamless user experience with no full page reloads beyond the initial page load, so I decided to play around a little and see if I could come up with an alternative. These are the core characteristics of the solution I set out to implement:</p>

<ol>
<li>The server needs to communicate what permissions/role the client has on inital page load.</li>
<li>The client app then needs to keep track of the user&rsquo;s login status, and change it accordingly when the user logs in or out. These operations should not cause a full page reload.</li>
<li>The access level of the routes should be declared as part of the rest of the routing configuration.</li>
</ol>


<h2>Configuring access levels and user roles</h2>

<p>To indicate the available user roles and access levels to be used in the routing system, I decided to make a separate module which could be used both on the client and server side (with Node.js):</p>

<p><div><script src='https://gist.github.com/6031923.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Both the user roles and access levels are defined as numbers so that it is possible to calculate permissions using binary operations. User roles are defined by which bit is set to 1, while access levels indicate whether that user role has access by setting the corresponding bit to either 1 or 0 in the bitmask<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. So, here is an example of binary operations that can be calculated to see whether the user role <code>user</code> has access to the access levels <code>admin</code> and <code>public</code>:</p>

<p>```
   010 // = userRole: user
OR 100 // = accessLevel admin
=  000 // = false, no access</p>

<p>   010 // = userRole: user
OR 111 // = accessLevel public
=  010 // = true, go ahead
```</p>

<h2>Setting up client-side routing</h2>

<p>When I define my routes I want to indicate what access level each route should have, so I add a new property to each route, called <code>access</code>, like so:</p>

<p><div><script src='https://gist.github.com/6032777.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h2>Communicating login status to client side app on initial page load</h2>

<p>When the user first loads the client side app, whether he&rsquo;s trying to access a restricted or public route initially, the server needs to communicate the current role of the user. Since the client side app can&rsquo;t decrypt the authentication cookie set by the server, I decided to communicate login status via the HTTP response which serves up the single page application. I decided on doing this by setting a cookie, which the client would clear upon reading it. I feel like there&rsquo;s something icky about doing it this way, so I&rsquo;m open to any alternative solutions here. Anyway, the server sets the cookie like so:</p>

<p><div><script src='https://gist.github.com/6032803.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>On the client-side I have an Angular service, <code>Auth</code>, which upon initialization will read in this cookie, save the login status, then discard the cookie. This service will also make the access levels, user roles, and current user available to the rest of the application.</p>

<p><div><script src='https://gist.github.com/6032854.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So, now my Angular app knows what login status the user has, and can perform the client side routing based on this status.</p>

<h2>Enforcing the routing policy client-side</h2>

<p><strong>Warning: I want to stress the importance of securing your server-side API once-again. The routing policy we&rsquo;re &ldquo;enforcing&rdquo; client-side is <em>very</em> easy to get around using Chrome Developer Tools or Firebug. The technique I&rsquo;m describing is used as a way of tailoring your views and giving a better user experience, but malicious users can still change their user role and get access to client-side routes that should be restricted to them. This is not a problem as long as any sensitive data is accessed via your server-side API, and the proper authentication/authorization strategy is implemented there.</strong></p>

<p>Now that I have access to the current user&rsquo;s role and the access level of each route I can actually enforce the policy I&rsquo;ve configured. So now I can add functionality like logging in, registering new users, authorizing a route, etc. to the <code>Auth</code> service I mentioned earlier.</p>

<p><div><script src='https://gist.github.com/6032902.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>This service can easily be reused by injecting it into any other component of my Angular application. For example, to actually enforce my routing policy I need to utilize the <code>authorize()</code> and <code>isLoggedIn()</code> functions in an event handler on $routeChangeStart:</p>

<p><div><script src='https://gist.github.com/6032970.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Now, whenever a route is accessed, the proper authorization check will be performed before serving up the view, and a redirect will happen in case the user has insufficient permissions.</p>

<p>One gotcha here is that the session could time out making the client believe the user is logged in when in fact he is declined when communicating with the server resource API. However this can be rectified by using an HTTP interceptor to detect API calls that were denied. Mine is pretty simple, and just redirects to the login page in case of a 401.</p>

<p><div><script src='https://gist.github.com/6033015.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h2>Customizing views based on user role</h2>

<p>I also want to introduce a directive I&rsquo;ve made which you can use to show/hide elements based on the current user&rsquo;s role. Here&rsquo;s what it looks like:</p>

<p><div><script src='https://gist.github.com/6033059.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So, whenever you decorate a tag with the <code>access-level</code> directive, it will check the role of the current user, perform an authorization check using the injected <code>Auth</code>, and then show/hide the element. It also remembers the previous <code>display</code> property of the element in case the user logs out, thus changing her role.</p>

<p>I really want to stress again the point that this scheme exposes all the routing logic and view templates to the client, and can easily be manipulated by the end user. So, you still have to make sure that the calls to the server are properly authenticated and authorized there.</p>

<p>I have made a complete example with all the code available in <em><a href="https://github.com/fnakstad/angular-client-side-auth">this GitHub repository</a></em>, which might illustrate my approach better than I have been able to in this blogpost.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The routingConfig module in the <a href="https://github.com/fnakstad/angular-client-side-auth">GitHub repo</a> will now automatically generate the required bit masks for you!<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
