<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MongoDB | A Modest Proposal]]></title>
  <link href="http://frederiknakstad.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://frederiknakstad.com/"/>
  <updated>2013-08-26T15:52:25+02:00</updated>
  <id>http://frederiknakstad.com/</id>
  <author>
    <name><![CDATA[Frederik Nakstad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seeding mongodb through your mongoose models]]></title>
    <link href="http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models/"/>
    <updated>2013-04-12T00:00:00+02:00</updated>
    <id>http://frederiknakstad.com/seeding-mongodb-through-your-mongoose-models</id>
    <content type="html"><![CDATA[<p><strong>23/4/2013 Update:</strong>
<em>A change implementing promise support for the</em> <code>create</code> <em>function <a href="https://github.com/LearnBoost/mongoose/commit/2ef5f237e054fc4846143530410e353ef7a7456e">was just committed to GitHub</a>, and should be available in the 3.7 release of Mongoose. Sweet!</em></p>

<p>Just wanted to share a nice little technique I discovered when working on a project using the wonderful <a href="http://mongoosejs.com/">Mongoose</a> library to interact with a MongoDB database in Node.js. I was writing some integration tests, and needed to reset and seed the database from a set of JSON files before running each test. I really wanted to do this through my existing Mongoose models, so that I could get all the seed data validated before running my tests. Since there also are relations between my different collections I needed to insert the collections in a certain order, so my first attempt quickly devolved into a textbook example of the good ol' pyramid of doom:</p>

<p><div><script src='https://gist.github.com/6033297.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>In the above code snippet <code>User</code>, <code>Exercise</code>, and <code>WorkoutTemplate</code> are my mongoose models, and since my <code>WorkoutTemplate</code> schema references my <code>Exercise</code> schema I need to insert data in that specific order. Using Mongoose&rsquo;s <code>remove</code> function with an empty object as the first argument will clear everything from the related collection. Furthermore, the <code>create</code> function will attempt to do a batch insert of the array you hand it. However, as you can see this quickly devolved into callback hell, and that was with just three different collections! Fortunately, I discovered that the <code>exec</code> function, which you can call on query objects, returns a promise object. This means I can just make a pretty, little promise chain instead of using callbacks.</p>

<p>There is just one obstacle to this&hellip; The <code>create</code> function does not return a query object, meaning we can&rsquo;t call <code>exec</code> on it to return a promise&hellip; I decided to rectify this by attaching a new function on the base mongoose Model which basically just wraps the <code>create</code> function, but actually returns a promise object.</p>

<p><div><script src='https://gist.github.com/6033333.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>So, finally I am able to create a nice and neat promise chain in the <code>beforeEach</code> function of my test suite. Voil√†!</p>

<p><div><script src='https://gist.github.com/6033342.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
